<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>行之博客</title>
    <description>Linux / C / golang / Emacs</description>
    <link>http://xep007.github.io/</link>
    <atom:link href="http://xep007.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 30 Oct 2014 20:50:28 +0800</pubDate>
    <lastBuildDate>Thu, 30 Oct 2014 20:50:28 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Go语言程序设计读书笔记（五）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 字符串（三）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 其他字符处理相关的包&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. string包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. strconv包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. utf8包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;1.1.4. unicode包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;1.1.5. regexp包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 字符串（三）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 其他字符处理相关的包&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
Go语言处理字符串的强大之处不仅限于对索引和切片的支持，也不限于fmt的格式化功能。string包提供了非常强大的功能，此外，strconv、unicode/utf8、unicode等也提供了大量实用的函数。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; string包&lt;/h4&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; strconv包&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; utf8包&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.4&lt;/span&gt; unicode包&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.5&lt;/span&gt; regexp包&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 30 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/10/30/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/10/30/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（四）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第3章 字符串（二）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 使用fmt包来格式化字符串&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. 格式化布尔值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. 格式化整数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. 格式化字符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;1.1.4. 格式化浮点数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;1.1.5. 格式化字符串和切片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-6&quot;&gt;1.1.6. 为调试格式化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第3章 字符串（二）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 使用fmt包来格式化字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
Go语言标准库中的fmt包提供了打印函数将数据以字符串形式输出到控制台、文件、其他满足io.Writer接口的值以及其他字符串中。有些输出函数的返回值为error,当将数据打印到控制台时，常常将该错误值忽略，但是如果打印到文件和网络连接等地方时，则一定要检查该错误值。
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; fmt包中的打印函数&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Errorf(format, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个包含所给定的格式化字符串以及args参数的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Fprint(writer, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按照格式%v和空格分隔的非字符串将args写入writer中，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Fprintf(writer, format, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按照字符串格式format将args参数写入writer,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Fprintln(writer, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按照格式%v以空格分隔以换行符结尾将参数args写入writer,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Print(args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用格式%v以空格分隔的非字符串将args写入os.Stdout,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Printf(format, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用格式化字符串format将args写入os.Stdout,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Println(args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用格式%v以空格分隔以换行符结尾将args写入os.Stdout,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Sprint(args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回args参数组成的字符串，每个参数都使用%v进行格式化的使用空格分离的非字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Sprintf(format, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回使用格式format格式化的args字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Sprintln(args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回使用格式%v格式化args后的字符串，以空格分隔以换行符结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
输出值的最简单方式是使用fmt.Print()函数和fmt.Println()函数输出到os.Stdout,或者使用fmt.Fprint()函数来输出到给定的io.Writer(如一个文件)，或者使用fmt.Sprint()函数和fmt.Sprintln()函数来输出到一个字符串。
&lt;/p&gt;

&lt;p&gt;
用于fmt.Errorf()、fmt.Printff()、fmt.Fprintf()以及fmt.Sprintf()函数的格式字符串包含一个或多个格式指令，这些格式指令的形式是%ML，其中M表示一个或多个可选的格式指令修饰符，而L则表示一个特定的格式指令符，这些格式指令见下表。有些格式指令可以接收一个或者多个修饰符，这些修饰符见再下一个表。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 2:&lt;/span&gt; fmt包中的格式指令&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;格式指令&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%%&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个%字面量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%b&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个二进制整数值（基数为２），或者是一个（高级的）用科学计数法表示的指数为２的浮点数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%c&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个Unicode字符的码点值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%d&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个十进制数值（基数为0）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%e&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以科学计数法e表示的浮点数或者复数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%E&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以科学计数法E表示的浮点数或者复数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%f&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以标准记数法表示的浮点数或者复数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%g&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以%e或者%f表示的浮点数或者复数，任何一个都以最为紧凑的方式输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%G&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以%E或者%f表示的浮点数或者复数，任何一个都以最为紧凑的方式输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%o&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个以八进制表示的数字（基数为8）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%p&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以十六进制（基数为16）表示的一个值的地址，前缀为Ox，字母使用小写民的a~f表示（用于高度）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%q&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用Go语法以及必要时使用转义，以双引号括起来的字符串或字节切片[]byte,或是以单引号括起来的数字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%s&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以原生的UTF-8字节表示的字符串或[]byte切片，对于一个给定的文本文件或在一个能够显示UTF-8编码的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;控制台，它会产生正确的Unicode输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以true或false输出的布尔值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%T&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用Go语法输出的值的类型&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%U&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个用Unicode表示法表示的整数码点，默认值为4个数字字符。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%v&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用默认格式输出的内置或自定义类型的值，或者是使用其类型的String()方法输出的自定义值，如果该方法存在的话&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%x&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以十六进制表示的整型值（基数为十六），或者是以十六进制数字表示的字符串或&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[]byte数组（每个字节用两个数字表示），数字a~f使用小写表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%X&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以十六进制表示的整型值（基数为十六），或者是以十六进制数字表示的字符串或&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[]byte数组（每个字节用两个数字表示），数字A~F使用大写表示&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 3:&lt;/span&gt; fmt 包中的格式指令修饰符&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;修饰符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;含义/结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;空白&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果输出的数字为负数，则在其前面加上一个减号&quot;-&quot;。如果输出的是正数，则在其前面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;加上一个空格。使用%x或者%X格式指令输出时，会在结果之间添加一个空格，例如，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Printf(&quot;% X&quot;, &quot;←&quot;)输出E2 86 92&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;#&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;让格式指令以另外一种格式输出数据：&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#o输出以0打头的八进制数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#p输出一个不含0x打头的指针&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#q尽可能以原始字符串的形式输出一个字符串或者[]byte切片（使用反引号），否则输出以双引号引起来的字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#v使用Go语法将值自身输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#x输出以0x打头的十六进制数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#X输出以0X打头的十六进制数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;+&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;让格式指令在数值前面输出+号或者-号，为字符串输出ASCII字符（别的字符会被转义），为结构体输出其字段名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;-&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;让格式指令将值进行向左对齐（默认值为右对齐）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;让格式指令以数字0而非空白进行填充&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;n.m&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;对于数字，这个修饰符会使用n（int值）个字符输出浮点数或者复数（为避免截断可以输出更多个），并在小数点后面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;n&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;输出m（int值）个数字。对于字符串，n声明了其最小宽度，并且如果字符串太小则会以空格填充，而m则声明了输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;m&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;的字符串所能使用的最长字符个数（从左至右），如果太长则可能会导致字符被截断。m和n两个都可以使用&#39;*&#39;来代替，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;这种情况下它们的值就可以从参数中获取。n或m都可以被省略&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;



&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; 格式化布尔值&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
布尔值使用%t（真值，truth value）格式指令来输出。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%t %t\n&quot;&lt;/span&gt;, &lt;span style=&quot;color: #fa8072;&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color: #fa8072;&quot;&gt;false&lt;/span&gt;)
&amp;#36755;&amp;#20986;&amp;#65306;true &lt;span style=&quot;color: #fa8072;&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; 格式化整数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
二进制格式指令为%b,八进制为%o,十六进制为%x，八进制和十六进制都可使用#修饰符。十进制整数使用%d，字符串使用%s。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; 格式化字符&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
Go语言的字符都是rune(即int32值)，它们可以以数字或者Unicode字符的形式输出。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%d %#o4x %U &#39;%c&#39;\n&quot;&lt;/span&gt;, 0x3A6, 934, &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;\u03A6&#39;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;\U000003A6&#39;&lt;/span&gt;)
&amp;#36755;&amp;#20986;&amp;#65306;934 016464x U+03A6 &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#934;&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.4&lt;/span&gt; 格式化浮点数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p&gt;
浮点数格式可以指定整体长度、小数位数，以及使用标准计数法还是科学计数法。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.5&lt;/span&gt; 格式化字符串和切片&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-5&quot;&gt;
&lt;p&gt;
字符串输出时可以指定一个最小宽度（如果字符串太短，打印函数会以空格填充）或者一个最大输出字符数（会将太长的字符串截断）。字符串可以以Unicode编码（即字符）、一个码点序列（即rune）或者表示它们的UTF-8字节码的形式输出。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-6&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.6&lt;/span&gt; 为调试格式化&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-6&quot;&gt;
&lt;p&gt;
%T（类型）格式指令用于打印一个内置的或者自定义值的类型，而%v格式指令则用于打印一个内置值的类型。事实上%v也可以打印自定义类型的值。
&lt;/p&gt;

&lt;p&gt;
为了更好地调试，使用%#v格式指令可以以编程的形式输出Go语言代码。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 28 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/10/28/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/10/28/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>GNU Emacs Lisp编程入门笔记（九）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 循环和递归&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. while&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. 一个例子：print-elements-of-list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. 使用增量计数器的循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. 使用减量计数器的循环&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. 递归&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;1.2.1. 使用列表的递归函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;1.2.2. 用递归算法代替计数器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-3&quot;&gt;1.2.3. 使用cond的递归例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 循环和递归&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Emacs Lisp有两种方式使一个表达式或一组表达式不断被求值：一是使用while循环，一是使用递归。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; while&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
while特殊表对其第一个参量进行求值，并测试这个返回值的真假。如为假，则跳出这个表达式的其余部分。如为真则对表达式的主体进行求值，然后再次测试第一个参量的真假，重复进行。
&lt;/p&gt;

&lt;p&gt;
while表达式的模板如下：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;while&lt;/span&gt; true-of-false-test
    body&amp;#8230;&amp;#8230;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; 一个例子：print-elements-of-list&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(setq animals &#39;(giraffe gazelle lion tiger))
(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;print-elements-of-list&lt;/span&gt; (list)
  &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Print each element of LIST on a line of its own.&quot;&lt;/span&gt;
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;while&lt;/span&gt; list
          (print (car list))
          (setq list (cdr list))))
(print-elements-of-list animals)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; 使用增量计数器的循环&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
来一个例子吧。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;sum&lt;/span&gt; (number)
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;let&lt;/span&gt; ((total 0)
        (i 1))
    (&lt;span style=&quot;color: #00ffff;&quot;&gt;while&lt;/span&gt; (&amp;lt;= i number)
    (setq total (+ i total))
    (setq i (1+ i)))
    total))
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(sum 100)          //&amp;#24471;&amp;#25968;&amp;#20026;5050
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; 使用减量计数器的循环&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
来一个例子吧。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;sum&lt;/span&gt; (number)
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;let&lt;/span&gt; ((total 0))
    (&lt;span style=&quot;color: #00ffff;&quot;&gt;while&lt;/span&gt; (&amp;gt; number 0)
    (setq total (+ number total))
    (setq number (- number 1)))
    total))
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(sum 100)       //&amp;#24471;&amp;#25968;5050
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 递归&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
递归函数就是调用自身的函数。
&lt;/p&gt;

&lt;p&gt;
一个递归函数通常一个条件表达式，这个表达式有三个部分：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;一个真假测试
&lt;/li&gt;
&lt;li&gt;函数名
&lt;/li&gt;
&lt;li&gt;一个表达式
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
递归的模板如下所示：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;name-of-recursive-function&lt;/span&gt; (argument-list)
    &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;documentation&amp;#8230;&amp;#8230;&quot;&lt;/span&gt;
    body&amp;#8230;&amp;#8230;
    (&lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; do-again-test
        (name-of-recursive-function
            next-step-expression)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.1&lt;/span&gt; 使用列表的递归函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(setq animals &#39;(giraffe gazelle lion tiger))
(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;print-elements-recursively&lt;/span&gt; (list)
  (print (car list))
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; list
      (print-elements-recursively
       (cdr list))))
(print-elements-recursively animals)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
(print-elements-recursively animals)会递归调用打印列表animals。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.2&lt;/span&gt; 用递归算法代替计数器&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;sum&lt;/span&gt; (number)
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; (= number 1)
      1
    (+ number
       (sum
        (1- number)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(sum 100)             //&amp;#24471;&amp;#25968;5050
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.3&lt;/span&gt; 使用cond的递归例子&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;p&gt;
上文sum函数中用if来判断，其实也可用cond(conditinal条件)特殊表来编写。
&lt;/p&gt;

&lt;p&gt;
cond表达式的模板如下所示：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;cond&lt;/span&gt;
    body&amp;#8230;&amp;#8230;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
重写sum函数：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;sum&lt;/span&gt; (number)
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;cond&lt;/span&gt; ((&amp;lt;= number 0) 0)
        ((= number 1) 1)
        ((&amp;gt; number 1)
         (+ number (sum (1- number))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/emacs/lisp/2014/10/26/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/emacs/lisp/2014/10/26/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89.html</guid>
        
        <category>lisp</category>
        
        
        <category>emacs</category>
        
        <category>lisp</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（三）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第3章 字符串(一)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 字面量、操作符和转义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. 比较字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3. 字符和字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;1.4. 字符串索引与切片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第3章 字符串(一)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 字面量、操作符和转义&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
字符串字面量使用双引号(&quot;)或者反引号(`)来创建。双引号用来创建可解析的字符串，但不能用来引用多行。反引号用来创建原生的字符串字面量，可多行，不支持转义序列。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;text1 := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;\&quot;what&#39;s that?\&quot;, he said&quot;&lt;/span&gt;    &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#21487;&amp;#35299;&amp;#26512;&amp;#30340;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#23383;&amp;#38754;&amp;#37327;&lt;/span&gt;
text2 := &lt;span style=&quot;color: #ffa500;&quot;&gt;`&quot;what&#39;s that?&quot;, he said`&lt;/span&gt;      &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#21407;&amp;#29983;&amp;#30340;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#23383;&amp;#38754;&amp;#37327;&lt;/span&gt;
radicais := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;&amp;#8730;\u221A \U0000221A&quot;&lt;/span&gt;        &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;radicais == &quot;&amp;#8730; &amp;#8730; &amp;#8730;&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; Go语言的字符串和字符转义&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;转义字符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;含义&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\\&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;反斜线&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\ooo&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;3个8位数给定的八进制代码的Unicode字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\&#39;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;单引号，只用于字符字面量内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\&quot;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;双引号，只用于可解析的字符串字面量内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\a&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码响铃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\b&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码退格&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\f&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码换页&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\n&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码换行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\r&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码回车&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码制表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\uhhhh&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;4个16位数字给定的十六进制码点的Unicode字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\Uhhhhhhhh&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;8个32位数字给定的十六进制码点的Unicode字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\v&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码的垂直制表符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\xhh&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;2个8位数字给定的十六进制码点的Unicode字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 2:&lt;/span&gt; 字符串操作符&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;语法&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;描述/结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s += t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将字符串t追加到字符串s的末尾&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s + t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将字符串s和t级联&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字符串s中索引位置为n处的原始字节&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n:m]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从位置n到位置m-1处取得的字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n:]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从位置n到位置len(s)-1处取得的字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[:m]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从索引位置0到位置m-1处取得的字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;len(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字符串s中的字节数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;len([]rune(s))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字符串s中字符的个数——可以使用更快的utf8.RuneCountInString()来代替&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;[]rune(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将字符串s转换成一个Unicode码点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;string(chars)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将一个[]rune或者[]int32转换成字符串，这里假设rune和int32切片都是Unicode码点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;[]byte(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无副本地将字符串s转换成一个原始字节的切片数组，不保证转换的字节是合法的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;string(bytes)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无副本地将[]byte或者[]uint8转换成一个字符串类型，不保证转换的字节是合法的UTF8编码字节&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;string(i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将任意数字类型的i转换成字符串，假设i是一个Unicode码点。例如i的值是65,那返回值为A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.Itoa(i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;int类型i的字符串表示和一个错误值。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Sprint(x)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任意类型x的字符串表示，例如，如果x是值为65的数字类型，那么返回值为65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 比较字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
Go语言字符串支持常规的比较操作(&amp;lt;、&amp;lt;= 、==、!= 、&amp;gt; 、&amp;gt;=),这些比较操作符在内存中一个字节一个字节地比较字符串。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 字符和字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
在Go语言中，字符使用两种不同的方式（可以很容易相互转换）来表示。一个单一的字符可以用一个单一的rune（或int32）来表示。
&lt;/p&gt;

&lt;p&gt;
字符串表示一个包含0个或多个字符序列的串。在一个字符串内部，每个字符都表示成一个或多个UTF-8编码的字节。
&lt;/p&gt;

&lt;p&gt;
字符串和rune切片互相转换：
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;chars := []rune(s)   //字符串转换成一个rune（即码点）切片。
&lt;/li&gt;
&lt;li&gt;s := string(chars)   //字符转换成字符串。
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
在一个字符串末尾追加字符串有三种方法：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;使用&quot;+=&quot;（不包括引号）操作符。s += s1
&lt;/li&gt;
&lt;li&gt;准备一个字符串切片([]string),然后使用strings.Join()函数一次性把所有的字符串串联起来。
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main
&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;strings&quot;&lt;/span&gt;
)
&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        s := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;def&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;ghi&quot;&lt;/span&gt;}
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(strings.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Join&lt;/span&gt;(s, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;&quot;&lt;/span&gt;))
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
输出：abcdefghi
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;利用bytes.Buffer.WriteString()方法
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; buffer bytes.Buffer
&lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; {
        &lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; piece, ok := &lt;span style=&quot;color: #00fa9a;&quot;&gt;getNextValidString&lt;/span&gt;(); ok { &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;getNextValidString()&amp;#24471;&amp;#33258;&amp;#24049;&amp;#23454;&amp;#29616;&lt;/span&gt;
                buffer.&lt;span style=&quot;color: #00fa9a;&quot;&gt;WriteString&lt;/span&gt;(piece)
        } &lt;span style=&quot;color: #00ffff;&quot;&gt;else&lt;/span&gt; {
                &lt;span style=&quot;color: #00ffff;&quot;&gt;break&lt;/span&gt;
        }
}
fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Print&lt;/span&gt;(buffer.&lt;span style=&quot;color: #00fa9a;&quot;&gt;String&lt;/span&gt;(), &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;\n&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
创建一个空的bytes.Buffer类型的值，然后使用bytes.Buffer.WriteString()方法将需要串联的字符串写入到buffer中，最后，bytes.Buffer.String()方法可以取回字符串。这个办法比前两个办法更高效。
&lt;/p&gt;

&lt;p&gt;
Go语言的for……range循环可以用于一个字符一个字符的迭代字符串。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main
&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        phrase := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;I am a boy. &amp;#25105;&amp;#26159;&amp;#20013;&amp;#22269;&amp;#20154;&amp;#12290;&quot;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;string: \&quot;%s\&quot;\n&quot;&lt;/span&gt;, phrase)
        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; index, char := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; phrase {
                fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%-2d    %U    &#39;%c&#39;    %X\n&quot;&lt;/span&gt;, index, char, char, []&lt;span style=&quot;color: #00fa9a;&quot;&gt;byte&lt;/span&gt;(&lt;span style=&quot;color: #00fa9a;&quot;&gt;string&lt;/span&gt;(char)))
        }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
运行结果为：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #fa8072;&quot;&gt;string&lt;/span&gt;: &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;I am a boy. &amp;#25105;&amp;#26159;&amp;#20013;&amp;#22269;&amp;#20154;&amp;#12290;&quot;&lt;/span&gt;
0     U+0049    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;I&#39;&lt;/span&gt;    49
1     U+0020    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39; &#39;&lt;/span&gt;    20
2     U+0061    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;a&#39;&lt;/span&gt;    61
3     U+006D    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;m&#39;&lt;/span&gt;    6D
4     U+0020    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39; &#39;&lt;/span&gt;    20
5     U+0061    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;a&#39;&lt;/span&gt;    61
6     U+0020    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39; &#39;&lt;/span&gt;    20
7     U+0062    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;b&#39;&lt;/span&gt;    62
8     U+006F    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;o&#39;&lt;/span&gt;    6F
9     U+0079    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;y&#39;&lt;/span&gt;    79
10    U+002E    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;.&#39;&lt;/span&gt;    2E
11    U+0020    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39; &#39;&lt;/span&gt;    20
12    U+6211    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#25105;&#39;&lt;/span&gt;    E68891
15    U+662F    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#26159;&#39;&lt;/span&gt;    E698AF
18    U+4E2D    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#20013;&#39;&lt;/span&gt;    E4B8AD
21    U+56FD    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#22269;&#39;&lt;/span&gt;    E59BBD
24    U+4EBA    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#20154;&#39;&lt;/span&gt;    E4BABA
27    U+3002    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#12290;&#39;&lt;/span&gt;    E38082
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; 字符串索引与切片&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
索引字符串的单个字符，有多种方法：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;对于只包含7位ASCII字符的字符串，只需要简单使用[]索引操作符。
&lt;/li&gt;
&lt;li&gt;对于包含非ASCII字符组成的字符串，我们可以将其转换成[]rune再使用[]索引操作符。以上二者的性能都为O(1)。
&lt;/li&gt;
&lt;li&gt;对于任意字符串（即那些可能包含有非ASCII字符的字符串），更好的方法是使用字符串切片。请参照3.6.1(下一个笔记)中的string包。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/10/26/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/10/26/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>在org-mdoe表格中输入“|”符号</title>
        <description>&lt;p&gt;
今天在org-mode中制作表格，需要在单元格中输入“|”符号，可“|”符号是制表符，一直试都未能成功。没办法只好去找org-mode文档。终于在&lt;a href=&quot;http://orgmode.org/manual/Built_002din-table-editor.html#fnd-1&quot;&gt;org-mode文档&lt;/a&gt;最后一行找到了答案，记下来，备忘。
&lt;/p&gt;


&lt;p&gt;
在需要输入“|”的地方输入\vert就行了。
&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/org/2014/10/25/%E5%9C%A8org-mode%E8%A1%A8%E6%A0%BC%E4%B8%AD%E8%BE%93%E5%85%A5%7C%E7%AC%A6%E5%8F%B7.html</link>
        <guid isPermaLink="true">http://xep007.github.io/org/2014/10/25/%E5%9C%A8org-mode%E8%A1%A8%E6%A0%BC%E4%B8%AD%E8%BE%93%E5%85%A5%7C%E7%AC%A6%E5%8F%B7.html</guid>
        
        <category>org</category>
        
        
        <category>org</category>
        
      </item>
    
      <item>
        <title>GNU Emacs Lisp编程入门笔记（八）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第10章 找回文本&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. kill环总览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. kill-ring-yank-pointer变量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第10章 找回文本&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在GNU Emacs中，无论你何时用&quot;kill&quot;命令从缓冲区中剪切了文本，都能用一个&quot;yank&quot;命令将其找回。
&lt;/p&gt;

&lt;p&gt;
一个简单的C-y(yank)命令，就从kill-ring(kill环)中取出第一个元素插入到当前缓冲区中。如果C-y后紧跟一个M-y命令，则不是第一个元素而是第二个元素被插入到当前缓冲区中。连续使用M-y则会把第三个、第四个……等代替第二个元素插入到当前缓冲区。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; kill环总览&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
kill环是文本字符串的一个列表。它类似于下面的列表：
(&quot;some text&quot; &quot;a different piece of text&quot; &quot;yet more text&quot;)
&lt;/p&gt;

&lt;p&gt;
能将文本从kill环中找回的函数有三个：yank函数，通常绑定到C-y; yank-pop函数，通常绑定到M-y;rotate-yank-pointer函数，这个函数被前面两个函数使用。
&lt;/p&gt;

&lt;p&gt;
这些函数通过一个被称为kill-ring-ynak-pointer的变量指向kill环。事实上，yank函数和yank-pop函数中插入文本的代码都是下面这个表达式。
&lt;/p&gt;

&lt;p&gt;
(insert (car kill-ring-yank-pointer))
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; kill-ring-yank-pointer变量&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
跟kill-ring一样，kill-ring-yank-pointer也是一个变量。它通过被绑定到相应的值来指向某些东西，这一点与其他Lisp变量没有什么两样。
&lt;/p&gt;

&lt;p&gt;
因而，如果kill环的值是：
&lt;/p&gt;

&lt;p&gt;
(&quot;some text&quot; &quot;a different piece of text&quot; &quot;yet more text&quot;)
&lt;/p&gt;

&lt;p&gt;
并且kill-ring-yank-pointer变量指向其中的第二个元素，则kill-ring-yank-pointer变量的值就是：
&lt;/p&gt;

&lt;p&gt;
(&quot;a different piece of text&quot; &quot;yet more text&quot;)
&lt;/p&gt;

&lt;p&gt;
变量kill-ring和kill-ring-yank-pointer都是指针，第一个指向被剪切文本列表的第一个元素，第二个指向第二个元素。
&lt;/p&gt;

&lt;p&gt;
rotate-yank-pointer函数改变kill-ring-yank-pointer变量指向的kill环中的元素。当这个元素指向的下一个元素超出了kill环的末尾，它自动将这个指针指向kill环的第一个元素。这就将一个列表自动转化为一个环的方法。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 25 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/emacs/lisp/2014/10/25/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/emacs/lisp/2014/10/25/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89.html</guid>
        
        <category>lisp</category>
        
        
        <category>emacs</category>
        
        <category>lisp</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（二）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 布尔与数值类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 基础&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. Go语言的注释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. Go语言的标识符与关键字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. 常量和变量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. 布尔值和布尔表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3. 数值类型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-1&quot;&gt;1.3.1. 整形&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3-2&quot;&gt;1.3.2. 浮点类型&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 布尔与数值类型&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
这是关于过程式编程的四章内容中的第一章，它是Go语言编程的基础。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 基础&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; Go语言的注释&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
行注释以“//”开始，块注释以 “/* */” 包裹。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; Go语言的标识符与关键字&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
Go语言的标识符是一个非空的字母或数字串，第一个字符必须是字母，但不能是关键字的名字。字母可以下划线，或者Unicode编码分类中的任何字符。
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; Go语言的关键字&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;break&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;default&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;func&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;interface&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;select&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;case&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;defer&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;go&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;map&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;struct&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;chan&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;else&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;goto&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;package&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;switch&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;const&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;fallthrough&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;if&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;range&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;type&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;contiue&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;for&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;import&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;return&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;var&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 2:&lt;/span&gt; Go语言预定义的标识符&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;append&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;copy&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;int8&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;nil&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;bool&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;delete&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;int16&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;Panic&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;uint&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;byte&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;error&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;int32&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;print&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;uint8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;cap&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;false&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;int64&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;println&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;uint16&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;close&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;float32&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;iota&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;real&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;uint32&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;complex&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;float64&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;len&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;recover&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;uint64&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;complex64&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;imag&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;make&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;rune&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;uintptr&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;complex128&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;int&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;new&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;string&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
标识符都是区分大小写的。
空标识符(下划线)“ _ ”是一个占位符，用于在赋值操作的时候将某个值赋值给空标识符，从而达到丢弃该值的目的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; 常量和变量&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
常量用const关键字声明，变量用var关键字声明，也可用快捷变量声明语法。
以下是一些声明的例子：  
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;const limit = 512&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//常量，其类型兼容任何数字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;const top uint16 = 1421&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//常量，类型为uint16&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;start := -19&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//变量，推断类型，快捷变量声明&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;end := int64(987654321)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//变量，类型为int64&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;var i int&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//变量，值为0,类型为int&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;var debug = false&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//变量，推断类型 bool&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;checkResults := true&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//变量，推断类型 bool&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;stepSize := 1.5&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//变量，推断类型 float64&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;acronym := &quot;FOSS&quot;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;//变量， 推断类型 string&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
对于整形字面量Go语言推断其类型为int,对于浮点型字面量推断其为float64,对于复数推断其为complex128。通常的做法是不显式地声明其类型。
在Go语言中，第一个数值常量的默认值都为0,每一个字符串都默认为空。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;枚举&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
需要设置多个常量时，不必重复使用const关键字，只需使用const把它们组合在一起。而iota则为枚举。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;const&lt;/span&gt; Cyan = 0
&lt;span style=&quot;color: #00ffff;&quot;&gt;const&lt;/span&gt; Magenta = 1
&lt;span style=&quot;color: #00ffff;&quot;&gt;const&lt;/span&gt; Yellow = 2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;const&lt;/span&gt; (
    Cyan = 0
    Magenta = 1
    Yellow = 2
)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;const&lt;/span&gt; (
    Cyan = &lt;span style=&quot;color: #fa8072;&quot;&gt;iota&lt;/span&gt;    &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;0&lt;/span&gt;
    Magenta        &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;1&lt;/span&gt;
    Yellow         &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;2&lt;/span&gt;
)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
以上3个代码片段的作用完全一样。
声明一组变量的方式是：
如果第一个常量的值没有显式设置，则它的值为0,第二个及以后的常量值默认为前一个常量的值。
如果第一个常量的值设为iota,则它的值为0,第二个及以后的常量值默认递增1。
关于iota,再来一个例子：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;BitFlag&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;
&lt;span style=&quot;color: #00ffff;&quot;&gt;const&lt;/span&gt; (
    Active EitFlag = 1 &amp;lt;&amp;lt; &lt;span style=&quot;color: #fa8072;&quot;&gt;iota&lt;/span&gt;             &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;1&amp;lt;&amp;lt;iota = 1 &amp;lt;&amp;lt; 0 == 1&lt;/span&gt;
    Send        &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#38544;&amp;#24335;&amp;#22320;&amp;#35774;&amp;#32622;&amp;#25104;BitFlag = 1 &amp;lt;&amp;lt; iota, 1 &amp;lt;&amp;lt; 1 == 2&lt;/span&gt;
    Receive     &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#38544;&amp;#24335;&amp;#22320;&amp;#35774;&amp;#32622;&amp;#25104;Receive = 1 &amp;lt;&amp;lt;iota,  1 &amp;lt;&amp;lt; 2 == 4&lt;/span&gt;
)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 布尔值和布尔表达式&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
Go语言内置了布尔值true和false。不支持隐式转化。
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;描述/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;!b&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;逻辑非，如b为true,则结果为false&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;a &amp;vert;&amp;vert; b&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;只要a或b任一个为true,则结果为true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;a &amp;amp;&amp;amp; b&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果a和b都为true,则结果为true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;lt; y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如x的值小于y，则结果为true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;lt;= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如x的值小于或等于y,则结果为true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x == y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如x的值等于y，则结果为true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x != y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如x的值不等于y,则结果为true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;gt;= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如x的值大于或等于y,则结果为true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;gt; y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如x的值大于y，则结果为true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
布尔值和表达式可以用于if语句中，也可用于for语句的条件中，以及switch语句的case子句的条件判断中。
&lt;/p&gt;

&lt;p&gt;
二元逻辑操作符（||和&amp;amp;&amp;amp;）,使用短路逻辑。
&lt;/p&gt;

&lt;p&gt;
比较操作符（&amp;lt;、&amp;lt;=、==、!=、&amp;gt;=、&amp;gt;）进行比较的值，这两个值必须是相同类型的值。如果是接口，必须是实现了相同的接口类型。
&lt;/p&gt;

&lt;p&gt;
==、!=操作符可以用于任何可比较的类型，包括数组和结构体，只要它们的元素和成员变量与==和!=操作符相兼容。这些操作符不能用于比较切片(slice)。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 数值类型&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
Go语言内置了大量数值类型，这些都是大小不限的（只受限于机器的内存）。每一个数值类型都不同，因此不能在不同数值类型（例如int和int32）之间进行二进制数值运算或者比较操作。无类型的数值常量可以兼容表达式中任何（内置的）类型的数值，因此可直接将一个无类型数值常量与另一个数值做加法，或者将一个无类型的常量与另一个数值进行比较，只要这个数值是内置类型的数值。
&lt;/p&gt;

&lt;p&gt;
如果非得在不同类型数值之间进行运算和比较操作，就必须进行类型转换，通常将类型转换成最大的类型以防止精度丢失。类型转换采用type(value)的形式，只要合法，就能转换成功——即使会导致数据丢失。请看以下例子：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;const&lt;/span&gt; factor = 3                          &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;factor&amp;#19982;&amp;#20219;&amp;#20309;&amp;#25968;&amp;#20540;&amp;#31867;&amp;#22411;&amp;#20860;&amp;#23481;&lt;/span&gt;
i := 20000                                &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#36890;&amp;#36807;&amp;#25512;&amp;#26029;&amp;#24471;&amp;#20986;i&amp;#30340;&amp;#31867;&amp;#22411;&amp;#20026;int&lt;/span&gt;
i *= factor
j := &lt;span style=&quot;color: #00fa9a;&quot;&gt;int16&lt;/span&gt;(20)                           &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;j&amp;#30340;&amp;#31867;&amp;#22411;&amp;#20026;int16,&amp;#19982;&amp;#36825;&amp;#26679;&amp;#23450;&amp;#20041;&amp;#25928;&amp;#26524;&amp;#19968;&amp;#26679;&amp;#65306;var j int16 = 20&lt;/span&gt;
i += &lt;span style=&quot;color: #00fa9a;&quot;&gt;int&lt;/span&gt;(j)                              &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#31867;&amp;#22411;&amp;#24517;&amp;#39035;&amp;#21305;&amp;#37197;&amp;#65292;&amp;#22240;&amp;#27492;&amp;#38656;&amp;#35201;&amp;#36716;&amp;#25442;&lt;/span&gt;
k := &lt;span style=&quot;color: #00fa9a;&quot;&gt;uint8&lt;/span&gt;(0)                            &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#25928;&amp;#26524;&amp;#19982;&amp;#36825;&amp;#26679;&amp;#23450;&amp;#20041;&amp;#19968;&amp;#26679;&amp;#65306;var k uint8&lt;/span&gt;
k = &lt;span style=&quot;color: #00fa9a;&quot;&gt;uint8&lt;/span&gt;(i)                             &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#36716;&amp;#25442;&amp;#25104;&amp;#21151;&amp;#65292;&amp;#20294;&amp;#26159;k&amp;#30340;&amp;#20540;&amp;#34987;&amp;#25130;&amp;#20026;8&amp;#20301;&lt;/span&gt;
fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(i, j, k)                     &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#25171;&amp;#21360;&amp;#65306;60020 20 16&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Go语言的算术操作符可用于数值操作。
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 4:&lt;/span&gt; 可用于任何内置的数值的算术运算操作符&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;语法&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;描述/结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;+x&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;正数x&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;-x&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;x的负值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x++&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;为x加一个无类型的常量1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x--&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;为x减去一个无类型的常量1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x += y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x加上y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x -= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x减去y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x *= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x乘以y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x /= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x除以y，如果这些数字都是整数那么任何余数都被丢弃，除以0会导致运行时异常&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x + y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;x与y的和&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x - y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;x减去y的结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x * y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;x乘以y的结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x / y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;x除以y的结果，如果这些数字都是整数那么任何余数都被丢弃，除以0会导致运行时异常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
虽然Go语言的运算优先级比较合理，但是提倡进行多运算符操作进使用括号（）来清晰表达运算顺序。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3.1&lt;/span&gt; 整形&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
Go语言提供11种整型，包括5种有符号，5种无符号，再加上一种用于存储指针的整型。byte是uint8的别名，rune是int32的别名。正常情况下，我们用int整型。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 5:&lt;/span&gt; Go语言的整数类型及其范围&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;类型&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;取值范围&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;byte&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;等同于uint8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;int&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;依赖不同平台，可以是int32或者int64&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;int8&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[-128, 127]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;int16&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[-32768, 32767&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;int32&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[-2147483648, 2147483647]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;int64&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[-9223372036854775808, 9223372036854775807]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rune&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;等同于int32&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;uint&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;依赖不同平台下的实现，可以是uint32或uint64&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;uint8&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[0, 255]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;uint16&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[0, 65535&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;uint32&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[0, 4294967295]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;uint64&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[0, 18446744073709551615]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;uintptr&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个可以恰好容纳指针值的无符号整数类型，32位平台是uint32,64位平台是uint64&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Go语言整形支持“table 3”中所列的所有算术运算符，同时也支持下表所列的算术和位运算。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;语法&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;含义/结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;^x&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按位取反&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x %= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x的值设为x除以y的余数，除0会导致异常&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;amp;= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x的值设为x和y按位与(AND)的结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;vert;= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x的值设为x和y按位或(OR)的结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x ^= y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x的值设为x和y按位异或(XOR)的结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;gt;&amp;gt;= u&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x的值设为x右移u个位的结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;lt;&amp;lt;= u&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将x的值设为x左移u个位的结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x % y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;结果为x除以y的余数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;amp; y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;结果为x和y按位与(AND)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;vert; y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;结果为x和y按位或(OR)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x ^ y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;结果为x和y按位异或(XOR)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;amp;^ y&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;结果为x和y按位与非(ANDNOT)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;lt;&amp;lt; u&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;结果为x左移u个位&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;x &amp;gt;&amp;gt; u　　&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;结果为x右称u个位&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
&lt;b&gt;大整数&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
有时我们需要使用甚至超过int64和uint64位的数进行完美计算。这时，Go语言标准库提供了big.Int型用于整数，big.Rat用于有理数。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3.2&lt;/span&gt; 浮点类型&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;p&gt;
Go语言提供了两种类型的浮点类型和两种类型的复数类型。
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 6:&lt;/span&gt; Go语言的浮点类型和复数类型&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;浮点类型&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;float32&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;float64&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;复数类型&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;complex64&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;complex128&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 25 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/10/25/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/10/25/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>GNU Emacs Lisp编程入门笔记（七）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第8章 剪切和存储文本&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. zap-to-char函数&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. interactive表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. zap-to-char函数体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. search-forward函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;1.1.4. progn函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;1.1.5. 总结zap-to-char函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. kill-region函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3. delete-region函数：接触c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;1.4. 用defvar初始化变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;1.5. copy-region-as-kill函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6&quot;&gt;1.6. 回顾&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第8章 剪切和存储文本&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在Emacs中，kill命令从一个缓冲区剪切一段文本，它不会丢弃文本，而是用一个列表保存起来。保存被剪切的一段文本的列表被称为kill环(kill ring)。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; zap-to-char函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
此函数的功能就是：将光标当前位置（位点）与出现特定字符的下一个位置之间这一区域中的文本剪切掉。剪切掉的文本放在kill环中。并能通过C-y(yank)命令从kill环中找回。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;zap-to-char&lt;/span&gt; (arg char) &lt;span style=&quot;color: #ffd700;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;version 19 implementation&lt;/span&gt;
  &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Kill up to and including ARG&#39;th occurrence of CHAR.&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;Goes backward if ARG is engative; error if CHAR not found.&quot;&lt;/span&gt;
  (interactive &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;*p\ncZap to char: &quot;&lt;/span&gt;)
  (kill-region (point)
               (&lt;span style=&quot;color: #00ffff;&quot;&gt;progn&lt;/span&gt;
                 (search-forward (char-to-string char) nil nil arg)
                 (point))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; interactive表达式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
(interactive &quot;*p\ncZap to char: &quot;)
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;“*”，星号意味着如果缓冲区是只读的，将产生一个错误。
&lt;/li&gt;
&lt;li&gt;“p”，这一部分以换行符&quot;\n&quot;结束。“p”是指传送给函数的第一个参量将是一个处理过的前缀参量的值。前缀参量用C-u以及其后的一个数来传送，或者用M-和一个数来传送。如果不带参量交互地调用这个函数，默认值1将被传送给这个函数。
&lt;/li&gt;
&lt;li&gt;“cZap to char: ”。小写的&quot;c&quot;是指交互表达式希望产生一个提示并且后续的参量将是一个字符。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; zap-to-char函数体&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
zap-to-char函数体包含了从光标的当前位置到（并包含）指定字符的这一区域剪切文本的代码。
(kill-region (point)……
(point)就是光标所处的当前位置。
代码的下一个部分是一个使用progn的表达式。progn表达式的主体由search-forward和point函数组成。
学习了search-forward函数之后，就容易理解progn是如何工作的了。因此先学search-forward函数。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; search-forward函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
此函数用于定位zap-to-char函数中被截取的字符的。查询成功，search-forward函数就在目标字符串中最后一个字符处设置位点。
&lt;/p&gt;

&lt;p&gt;
search-forward函数如下：
&lt;/p&gt;

&lt;p&gt;
(search-forward (char-to-string char) nil nil arg)
&lt;/p&gt;

&lt;p&gt;
search-forward函数有4个参量：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;第一个参量是目标，就是所要查找的内容。此参量必须是一个字符串。char-to-string用于转换字符串。
&lt;/li&gt;
&lt;li&gt;第二个参量绑定查询范围;nil表示到达缓冲区末尾。
&lt;/li&gt;
&lt;li&gt;第三个参量告诉这个函数如果查询失败应该怎么办——可以发出一个出错信号，也可返回nil。nil表示发出一个出错信号。
&lt;/li&gt;
&lt;li&gt;第四个参量是重复计数值——待查找字符串出现的次数的计数。此参量可选。如未给，则默认为1,如为负，则查询就朝后进行。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.4&lt;/span&gt; progn函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p&gt;
progn函数使其每一个参量顺序求值并返回最后一个参量的值。此例中progn有两个参量，一个是search-forward，表示在文本中查询目标字符串，如查到就在目标字符串后设置位点。第二个参量point表达式返回位点的值。传送给kill-region函数作为其第二个参量。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.5&lt;/span&gt; 总结zap-to-char函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-5&quot;&gt;
&lt;p&gt;
当zap-to-char函数被调用时，给kill-region的第一个参量是光标所在的位置，search-forward函数将位点移到查找到的字符后，point返回位点的值。然后kill-region将区域内的文本剪切掉。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; kill-region函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
kill-region函数功能就是删去文档字符串的一部分。代码如下：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;kill-region&lt;/span&gt; (beg end)
    &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Kill between point and mark.&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;The text is deleted but saved in the kill ring.&quot;&lt;/span&gt;
(interactive &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;*r&quot;&lt;/span&gt;)
(copy-region-as-kill beg end)
(delete-region beg end))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; delete-region函数：接触c&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
delete-region函数删除一个区域中的内容，而且你永远无法找回它。此函数是用c语言写成的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; 用defvar初始化变量&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
defvar是创建一个变量并可以赋初值用的。它跟setq函数相似。但有两点不同。
&lt;/p&gt;

&lt;p&gt;
defvar与setq的不同之处：
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一，defvar只对无值的变量赋值。如果变量已经有一个值，defvar不会覆盖已经存在的值。
&lt;/li&gt;
&lt;li&gt;第二，defvar特殊表有一个文档字符串。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.5&lt;/span&gt; copy-region-as-kill函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;p&gt;
此函数拷贝缓冲区中的一个文本区域，并将其保存到kill-ring变量中。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.6&lt;/span&gt; 回顾&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;progn 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
这个函数依次对其第一个参量求值，并返回最后一个参量的值。例如：
(progn 1 2 3 4 )
结果返回4。
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;searchforward
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
这个函数查找一个字符串，并且如果找到这个字符串就移动位点。
这个函数有4个参量：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;要查找的字符串
&lt;/li&gt;
&lt;li&gt;查找的限制范围（可选）
&lt;/li&gt;
&lt;li&gt;如果查找失败是返回nil还是返回一个错误消息（可选）
&lt;/li&gt;
&lt;li&gt;重复查找多少次，如果这个参量是负的，就是往后查找（可选）
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 23 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/emacs/lisp/2014/10/23/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/emacs/lisp/2014/10/23/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89.html</guid>
        
        <category>lisp</category>
        
        
        <category>emacs</category>
        
        <category>lisp</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（一）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第1章 5个例子&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 开始&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. 下载Go并配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. 安装gocode及配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. 配置Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. 编辑、编译和运行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3. 原著接下去示范了5个小程序。对于没有其他语言基础的人来说，还是有点难。我也不准备做笔记。等到学会了基本的Go语法后再来分析这5个例子。&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
《Go语言程序设计》，[英] Mark Summerfield著，许式伟、吕桂华、徐立、何李石译。国外最权威的Go语言编程书籍。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;本书的结构&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第1章 开始讲解如何建立和运行Go程序，通过介绍5个简短的示例简要介绍了Go语言的语法与特性，以及一些标准库。
&lt;/li&gt;
&lt;li&gt;第2章至第7章更深入地讲解了Go语言的方方面面。其中有三章讲解了Go语言的内置数据类型：第2章涵盖了标识符、布尔型和数值类型，第3章涵盖了字符串，第4章涵盖了Go语言内置的集合类型。
&lt;/li&gt;
&lt;li&gt;第5章描述并讲解了Go语言的语句和控制结构，还解释了如何创建和使用自定义函数。最后展示了如何使用Go语言创建一个过程式的非并发程序。
&lt;/li&gt;
&lt;li&gt;第6章展示了如何在Go语言中进行面向对象编程。
&lt;/li&gt;
&lt;li&gt;第7章讲解了Go语言的并发特性。
&lt;/li&gt;
&lt;li&gt;第8章展示了如何读取和写入自定义的二进制文件，Go二进制文件、文本、、JSON以及XML文件。
&lt;/li&gt;
&lt;li&gt;最后一章展示了导入和使用标准库包，自定义包以及第三方软件包。
&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第1章 5个例子&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
这一章作者使用了5个例子简洁概览了Go语言的一些特性和核心包（其他语言称作模块或标准库）。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 开始&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
&lt;b&gt;debian+Emacs构建Go编程环境&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
这不是原著内容，是我的配置过程。不同系统请baidu。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; 下载Go并配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;因go.googlecode.com被墙。所以到国内&lt;a href=&quot;http://www.golangtc.com/download&quot;&gt;golang中国下载。&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;解压到~/家目录。
&lt;/li&gt;
&lt;li&gt;配置goroot和gopath。打开~/.profile文件。在结尾加入以下内容。
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;GOROOT&lt;/span&gt;=$&lt;span style=&quot;color: #ffa07a;&quot;&gt;HOME&lt;/span&gt;/go  
&lt;span style=&quot;color: #b0c4de;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;GOARCH&lt;/span&gt;=amd64
&lt;span style=&quot;color: #b0c4de;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;GOOS&lt;/span&gt;=linux
&lt;span style=&quot;color: #b0c4de;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;GOBIN&lt;/span&gt;=$&lt;span style=&quot;color: #ffa07a;&quot;&gt;GOROOT&lt;/span&gt;/bin
&lt;span style=&quot;color: #b0c4de;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;GOPATH&lt;/span&gt;=$&lt;span style=&quot;color: #ffa07a;&quot;&gt;HOME&lt;/span&gt;/gopro
&lt;span style=&quot;color: #b0c4de;&quot;&gt;export&lt;/span&gt; &lt;span style=&quot;color: #ffa07a;&quot;&gt;PATH&lt;/span&gt;=$&lt;span style=&quot;color: #ffa07a;&quot;&gt;PATH&lt;/span&gt;:$&lt;span style=&quot;color: #ffa07a;&quot;&gt;GOBIN&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
保存，然后在xterm或gnome-terminal中运行go version。如显示版本号及系统，则表示安装成功。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; 安装gocode及配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
在xterm或gnome-terminal里输入:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;go get github.com/nsf/gocode
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
配置gocode:
xterm或gnome-terminal下输入: 
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;gocode set propose-builtins true
gocode set lib-path &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;/home/user/go/pkg/linux_amd64&quot;&lt;/span&gt;
gocode set autobuild true
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
然后输入: gocode set ，如显示以下内容则表示配置成功。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;user@debian:~$ gocode set
propose-builtins true
lib-path &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;/home/user/go/pkg/linux_amd64&quot;&lt;/span&gt;
autobuild true
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; 配置Emacs&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
在Emacs中通过elpa安装auto-complete、go-autocomplete、yasnippet、ecb插件，并进行配置。以下是我的.emacs中相关设置。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;;;;;auto-complete
(add-to-list &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;load-path &quot;~/.emacs.d/elpa/auto-complete-20140824.1658&quot;)&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;(require &#39;&lt;/span&gt;auto-complete)
(require &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;auto-complete-config)&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;(add-to-list &#39;&lt;/span&gt;ac-dictionary-directories &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;~/.emacs.d/elpa/auto-complete-20140824.1658/ac-dict&quot;&lt;/span&gt;)
(ac-config-default)
;(define-key ac-complete-mode-map &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;\C-n&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;ac-next)&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;;(define-key ac-complete-mode-map &quot;\C-p&quot; &#39;&lt;/span&gt;ac-previous)

;;;;yasnippet
(require &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;yasnippet)&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;(yas-global-mode 1)&lt;/span&gt;

&lt;span style=&quot;color: #ffa500;&quot;&gt;;;;;ecb&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;(require &#39;&lt;/span&gt;ecb)
(setq ecb-tip-of-the-day nil)
;;&amp;#33258;&amp;#21160;&amp;#32553;&amp;#36827;
(global-set-key (kbd &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;RET&quot;&lt;/span&gt;) &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;newline-and-indent)&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;;;;;go-autocomplete--------go&amp;#32534;&amp;#31243;&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;(add-to-list &#39;&lt;/span&gt;load-path &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;~/.emacs.d/elpa/go-mode-20140905.2210&quot;&lt;/span&gt;)
(require &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;go-mode-autoloads)&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;(add-to-list &#39;&lt;/span&gt;load-path &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;~/.emacs.d/elpa/go-autocomplete-20140527.2104&quot;&lt;/span&gt;)
(require &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;go-autocomplete)&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;(require &#39;&lt;/span&gt;auto-complete-config)
(add-hook &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;before-save-hook &#39;&lt;/span&gt;gofmt-before-save)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Go语言文档&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
golang.org被墙，上不了。可在本地查找golang文档。具体做法如下：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;在xterm或gnome-terminal中运行
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;godoc -http:=8000
&lt;/pre&gt;
&lt;/div&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;然后在浏览器中打开localhost:8000就行了。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 编辑、编译和运行&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
随便打开一个编辑器就可以进行Go代码编辑。如果是简单的小程序，随便在什么方创建程序都可以。如果是工程，一般要在go-path中创建以下文件夹，源代码放在src文件夹中。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;mkdir ~/gopro/bin ~/gopro/src ~/gopro/pkg
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
我们先来个hello world。打开Emacs,C-x C-f新建hello.go文件，在文件中输入以下代码。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
)

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Hello,World.&quot;&lt;/span&gt;)
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
保存后，运行go build hello.go，如果没有错误提示，就表示编译成功了。
输入./hello就可以运行程序了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 原著接下去示范了5个小程序。对于没有其他语言基础的人来说，还是有点难。我也不准备做笔记。等到学会了基本的Go语法后再来分析这5个例子。&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 23 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/10/23/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/10/23/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>GNU Emacs Lisp编程入门笔记（六）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第7章 基本函数：car、cdr、cons&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. car和cdr函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. cons函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3. nthcdr函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;1.4. setcar函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;1.5. setcdr函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第7章 基本函数：car、cdr、cons&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在Lisp中，car、cdr、cons都是基本函数。cons函数用于构造列表，car和cdr函数则用于拆分列表。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; car和cdr函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
一个列表的car，就是返回这个列表的第一个元素。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(car &#39;(rose violet daisy buttercup))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
得到结果为“rose”。
car并不改变列表。只是返回列表的第一个元素。
一个列表的cdr就是一个列表第一个元素之后的所有元素。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(car &#39;(rose violet daisy buttercup))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
结果为“(violet daisy buttercup)”。cdr也不改变原列表。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; cons函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
cons函数可以构造列表，其作用与car和cdr函数正好相反。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(cons &#39;pine &#39;(fir oak maple))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
结果为“(pine fir oak maple)”。cons必须提供一个待插入元素的列表，哪怕是空列表。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;查询列表的长度：length函数&lt;/b&gt;
通过Lisp的length函数可以得到一个列表的长度。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(length &#39;(a b c))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
结果为3。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(length (cons &#39;a &#39;(b c d e)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
结果为5。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; nthcdr函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
nthcdr函数,其所做之事就是重复地取列表的cdr。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(nthcdr 2 &#39;(pine fir oak maple))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
结果为(oak maple)。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(netcdr 4 &#39;(pine fir oak maple))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
结果为nil。nthcdr也不会改变原列表。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; setcar函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
setcar函数会改变列表的值。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(setq animals &#39;(giraffe antelope tiger lion))  
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;(setcar animals &#39;hippopotamus)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
第一行代码构造一个列表，并把列表赋值给变量animals。第二行代码：这时变量animals的值变成了(hippopotamus antelope tiger lion),列表的第一个值被替换了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.5&lt;/span&gt; setcdr函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;p&gt;
与setcar函数相似，不同之处在于这个函数替换列表的第二个以及其后的所有元素。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;&lt;span class=&quot;linenr&quot;&gt;1: &lt;/span&gt;(setq domesticated-animals &#39;(horse cow sheep goat))
&lt;span class=&quot;linenr&quot;&gt;2: &lt;/span&gt;(setcdr domesticated-animals &#39;(cat dog))
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
现在domesticated-animals的值变成了(horse cat dog)。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 22 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/emacs/lisp/2014/10/22/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/emacs/lisp/2014/10/22/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89.html</guid>
        
        
        <category>emacs</category>
        
        <category>lisp</category>
        
      </item>
    
  </channel>
</rss>
