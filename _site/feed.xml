<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>行之博客</title>
    <description>Linux / C / golang / Emacs</description>
    <link>http://xep007.github.io/</link>
    <atom:link href="http://xep007.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 09 Nov 2014 18:19:21 +0800</pubDate>
    <lastBuildDate>Sun, 09 Nov 2014 18:19:21 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Go语言程序设计读书笔记（八）——集合类型之映射</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. Go语言程序设计读书笔记（八）——集合类型之映射&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 映射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. 创建和填充映射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3. 映射查询&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;1.4. 映射修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-5&quot;&gt;1.5. 键序遍历映射&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-6&quot;&gt;1.6. 映射反转&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Go语言程序设计读书笔记（八）——集合类型之映射&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 映射&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
Go语言中的映射(map)是一种内置的数据结构，保存键——值对的无序集合，它的容量只受到机器内在的限制。
&lt;/p&gt;

&lt;p&gt;
在一个映射里所有的键都是唯一的而且必须是支持==和!=操作符的类型，大部分Go语言的基本类型都可以作为映射的键，例如：int、float64、rune、string、可比较的数组和结构体、基于这些类型的自定义类型，以及指针。Go语言的切片和不能用于比较的数组和结构体以及基于这些类型的自定义类型都不能用作键。
&lt;/p&gt;

&lt;p&gt;
指针、引用类型或任何内置类型的值、自定义类型都可用作值，包括映射本身。因此，它可以创建任意复杂的数据结构。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; 映射的操作&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;m[k] = v&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;用键k来将值v赋值给映射m。如果映射m中的k已存在，则将之前的值丢弃&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;Delete(m, k)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将键k及其相关的值从映射m中删除。如果k不存在则安全地不执行任何操作&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;v := m[k]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从映射m中取得键k相对应的值并将其赋值给v。如果k在映射中不存在，则将映射类型的0值赋值给v&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;v, found := m[k]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从映射m中取得键k相对应的值并将其赋值给v,并将found的值赋值为true。如果k在映射中不存在，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;则将映射类型的0值 赋值给v，并将found的值赋值为false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;len(m)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回映射m中的项（“键/值”对） 的数目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
映射属于引用类型，其传递很廉价，其搜索很快，比线性搜索还快100倍左右。
&lt;/p&gt;

&lt;p&gt;
映射里所有键类型必须是相同的，所有值类型必须是相同的，但键和值的类型可以不同。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;映射的创建方式&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt; (&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;KeyType&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;ValueType&lt;/span&gt;, initialCapacity)
&lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt; (&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;KeyType&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;ValueType&lt;/span&gt;)
&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;KeyType&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;ValueType&lt;/span&gt;{}
&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;KeyType&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;ValueType&lt;/span&gt;{key1: value1, key2:value2, ..., keyN:valueN}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 创建和填充映射&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;键为string类型，值为float64类型的映射
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        massForPlanet := &lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;float64&lt;/span&gt;) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#19982;map[string]float64{}&amp;#30456;&amp;#21516;&lt;/span&gt;
        massForPlanet[&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mercury&quot;&lt;/span&gt;] = 0.06
        massForPlanet[&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Venus&quot;&lt;/span&gt;] = 0.82
        massForPlanet[&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Earth&quot;&lt;/span&gt;] = 1.00
        massForPlanet[&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mars&quot;&lt;/span&gt;] = 0.11

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(massForPlanet)
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;Mercury&lt;/span&gt;:0.06 Venus:0.82 Earth:1 Mars:0.11]
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;键的类型为指针
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
)

&lt;span style=&quot;color: #00ffff;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;Point&lt;/span&gt; &lt;span style=&quot;color: #00ffff;&quot;&gt;struct&lt;/span&gt;{ x, y, z int }

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; (point &lt;span style=&quot;color: #ffff00;&quot;&gt;Point&lt;/span&gt;) &lt;span style=&quot;color: #00fa9a;&quot;&gt;String&lt;/span&gt;() &lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt; {
        &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Sprintf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;(%d, %d, %d)&quot;&lt;/span&gt;, point.x, point.y, point.z)
}

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {

        triangle := &lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[*&lt;span style=&quot;color: #ffff00;&quot;&gt;Point&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;, 3)
        triangle[&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;Point&lt;/span&gt;{89, 47, 27}] = &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;a&quot;&lt;/span&gt;
        triangle[&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;Point&lt;/span&gt;{86, 65, 86}] = &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;b&quot;&lt;/span&gt;
        triangle[&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;Point&lt;/span&gt;{7, 44, 45}] = &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;c&quot;&lt;/span&gt;

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(triangle)
}
&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[(&lt;span style=&quot;color: #ffff00;&quot;&gt;89&lt;/span&gt;, 47, 27):&lt;span style=&quot;color: #00fa9a;&quot;&gt;a&lt;/span&gt; (86, 65, 86):&lt;span style=&quot;color: #00fa9a;&quot;&gt;b&lt;/span&gt; (7, 44, 45):c]
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
使用指针作为键，意味着我们可以增加两个相同的内容，只要分别创建它们就可以获得不同的地址。但如果我们希望这个映射对任何实际上相同的内容只存储一个的话，我们就存储Point的值而不是指向Point的指针就可以了。即把struct作为键。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 映射查询&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
映射和数组或切片一样可以使用索引操作符[]，但为数组或切片不同的是，映射的键类型不必是int类型。Go语言提供了两种类型的语法用于映射查询，两种方式都使用[]操作符。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        populationForCity := &lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;{
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Istanbul&quot;&lt;/span&gt;: 12610000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Karachi&quot;&lt;/span&gt;:  10620000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&quot;&lt;/span&gt;:   12690000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Shanghai&quot;&lt;/span&gt;: 13680000,
        }

        population := populationForCity[&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&quot;&lt;/span&gt;]
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&#39;s population is &quot;&lt;/span&gt;, population)
        population = populationForCity[&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Emerald City&quot;&lt;/span&gt;]
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Emerald City&#39;s population is &quot;&lt;/span&gt;, population)

}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
Mumbai&lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;s population is  12690000&lt;/span&gt;
&lt;span style=&quot;color: #ffa500;&quot;&gt;Emerald City&#39;&lt;/span&gt;s population is  0
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
如果我们查询的键在映射里，就返回它的值。如果键不存在，就会返回一个0值。这就会出现一个问题，0是表示不存在这个键还是它的值就是0。为了避免这种情况，我们可以使用以下另一种查询方法。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        populationForCity := &lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;{
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Istanbul&quot;&lt;/span&gt;: 12610000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Karachi&quot;&lt;/span&gt;:  10620000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&quot;&lt;/span&gt;:   12690000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Shanghai&quot;&lt;/span&gt;: 13680000,
        }

        city := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Emerald&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; population, found := populationForCity[city]; found {
                fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%s&#39;s population is %d\n&quot;&lt;/span&gt;, city, population)
        } &lt;span style=&quot;color: #00ffff;&quot;&gt;else&lt;/span&gt; {
                fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%s&#39;s population data is unavailable\n&quot;&lt;/span&gt;, city)
        }

}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
Emerald&lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;s population data is unavailable&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; 映射修改&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
我们可以往映射里插入或删除一个项（键/值对）。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        populationForCity := &lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;{
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Istanbul&quot;&lt;/span&gt;: 12610000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Karachi&quot;&lt;/span&gt;:  10620000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&quot;&lt;/span&gt;:   12690000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Shanghai&quot;&lt;/span&gt;: 13680000,
        }

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(populationForCity), populationForCity)
        &lt;span style=&quot;color: #b0c4de;&quot;&gt;delete&lt;/span&gt;(populationForCity, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Shanghai&quot;&lt;/span&gt;) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#21024;&amp;#38500;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(populationForCity), populationForCity)
        populationForCity[&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Emerald&quot;&lt;/span&gt;] = 11620000 &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#25554;&amp;#20837;&amp;#19968;&amp;#20010;&amp;#26032;&amp;#38190;/&amp;#20540;&amp;#23545;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(populationForCity), populationForCity)

}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
4 &lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;Istanbul&lt;/span&gt;:12610000 Karachi:10620000 Mumbai:12690000 Shanghai:13680000]
3 &lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;Mumbai&lt;/span&gt;:12690000 Istanbul:12610000 Karachi:10620000]
4 &lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;Emerald&lt;/span&gt;:11620000 Istanbul:12610000 Karachi:10620000 Mumbai:12690000]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.5&lt;/span&gt; 键序遍历映射&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;p&gt;
按键的顺序遍历映射。映射是无序集合，如果我们想要按顺序输出映射，可以有两种方式，一种是按键顺序输出，一种是按值顺序输出。本节先介绍按键序输出。按键顺序输出的思想是创建一个足够大的切片去保存映射里的所有键，然后对切片排序，遍历切片得到键，再从映射里得到这个键的值。这样就可以实现顺序输出了。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;sort&quot;&lt;/span&gt;
)

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        populationForCity := &lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;{
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Istanbul&quot;&lt;/span&gt;: 12610000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Karachi&quot;&lt;/span&gt;:  10620000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&quot;&lt;/span&gt;:   12690000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Shanghai&quot;&lt;/span&gt;: 13680000,
        }

        cities := &lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt;([]&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;, 0, &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(populationForCity))
        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; city := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; populationForCity {
                cities = &lt;span style=&quot;color: #b0c4de;&quot;&gt;append&lt;/span&gt;(cities, city)
        }

        sort.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Strings&lt;/span&gt;(cities)
        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; _, city := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; cities {
                fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%-10s  %8d\n&quot;&lt;/span&gt;, city, populationForCity[city])
        }
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
Istanbul    12610000
Karachi     10620000
Mumbai      12690000
Shanghai    13680000
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.6&lt;/span&gt; 映射反转&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;p&gt;
上节实现的是按键顺序输出映射，要实现按值顺序输出也是可以的。如果一个映射的值都是唯一的，而且值的类型也是映射支持的键类型。那么很容易将它反转。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        populationForCity := &lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;{
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Istanbul&quot;&lt;/span&gt;: 12610000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Karachi&quot;&lt;/span&gt;:  10620000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&quot;&lt;/span&gt;:   12690000,
                &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Shanghai&quot;&lt;/span&gt;: 13680000,
        }

        cityForPopulation := &lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;]&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;, &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(populationForCity))
        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; city, population := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; populationForCity {
                cityForPopulation[population] = city
        }

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(cityForPopulation)
}
&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
&lt;span style=&quot;color: #00ffff;&quot;&gt;map&lt;/span&gt;[&lt;span style=&quot;color: #ffff00;&quot;&gt;10620000&lt;/span&gt;:Karachi 12690000:Mumbai 13680000:Shanghai 12610000:Istanbul]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
记住映射里的值必须是唯一的，不然只能保存最后一个。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 09 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/11/09/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/11/09/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（七）——集合类型之数组与切片</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第4章 集合类型(一)数组与切片&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 值、指针和引用类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. 数组和切片&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;1.2.1. 数组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;1.2.2. 切片&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-1&quot;&gt;1.2.2.1. 索引与分割切片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-2&quot;&gt;1.2.2.2. 遍历切片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-3&quot;&gt;1.2.2.3. 修改切片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2-4&quot;&gt;1.2.2.4. 排序和搜索切片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第4章 集合类型(一)数组与切片&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 值、指针和引用类型&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
通常情况下，Go语言的变量持有相应的值。也就是说，我们可以将一个变量想像成它所持有的值来使用。其中有些例外，对于通道、函数、方法、映射及切片的引用变量，它们持有的都是引用，也即保存指针的变量。
&lt;/p&gt;

&lt;p&gt;
Go语言中函数和方法是值传递的。
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;对于布尔变量、数值类型和字符串按值传递是非常廉价的，也就1～16个字节（视机器而定）。但是如果修改了一个传入的字符串（例如使用+=操作符），因需创建一个新的字符串，并且复制原始的字符串并将其加到该字符串之后，所以这对于大字符串来说代价将非常大。
&lt;/li&gt;
&lt;li&gt;数组也是值传递，因此传递一个大数组代价也很大。在Go中，一般使用切片代替数组来传递。
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
如果需要一个函数修改我们传入的值。由于值类型是复制的，因此任何修改只作用于其副本，原始值不会被改变。同时传值的成本也较大。这种情况下，一般使用指针。
&lt;/p&gt;

&lt;p&gt;
Go语言的指针跟c/c++大致一样，但不支持指针运算。
&lt;/p&gt;


&lt;p&gt;
常用情况：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;需要在一个函数或方法中返回超过四五个值的情况时，如果这些值是同一类型的，最好使用一个切片来传递。
&lt;/li&gt;
&lt;li&gt;如果值类型各异最好传递一个指向结构体的指针。
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
除了值和指针外，Go语言还有引用类型（另外还有接口类型，但大多数实际使用中可以把接口看成某种类型的引用，引用类型将地6.3节接触）。Go语言中的引用类型主要有：映射、切片、通道、函数和方法。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 数组和切片&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.1&lt;/span&gt; 数组&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
Go语言的数组是一个定长的序列，其中的元素类型相同。多维数组可以简单地使用自身为数组的元素来创建。
&lt;/p&gt;

&lt;p&gt;
数组的元素使用操作符[]来索引，索引从0开始。数组是可以更改的（字符串不能更改）。
&lt;/p&gt;

&lt;p&gt;
数组使用以下方法来创建：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;[length]Type
[N]&lt;span style=&quot;color: #ffff00;&quot;&gt;Type&lt;/span&gt;{value1, value2, value3..., valueN}
[...]&lt;span style=&quot;color: #ffff00;&quot;&gt;Type&lt;/span&gt;{value1, value2, ...,valueN} &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#30465;&amp;#30053;&amp;#31526;...&amp;#65292;Go&amp;#20250;&amp;#33258;&amp;#21160;&amp;#35745;&amp;#31639;&amp;#25968;&amp;#32452;&amp;#38271;&amp;#24230;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
以下示例展示了如何创建和索引数组：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main
&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        &lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; buffer [20]&lt;span style=&quot;color: #ffff00;&quot;&gt;byte&lt;/span&gt;
        &lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; grid1 [3][3]&lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;
        grid1[1][0], grid1[1][1], grid1[1][2] = 8, 6, 2
        grid2 := [3][3]&lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;{ 
                            {4, 3}, 
                            {8, 6, 2} 
                          }

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(grid1, grid2)

        cities := [...]&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Shanghai&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Istanbul&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;}
        cities[&lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(cities)-1] = &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Karachi&quot;&lt;/span&gt;

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Type Len Contents&quot;&lt;/span&gt;)
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%-8T %2d %v\n&quot;&lt;/span&gt;, buffer, &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(buffer), buffer)
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%-8T %2d %q\n&quot;&lt;/span&gt;, cities, &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(cities), cities)
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&amp;#36816;&amp;#34892;&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;

[[0 0 0] [8 6 2] [0 0 0]] [[4 3 0] [8 6 2] [0 0 0]]
Type Len Contents
[20]&lt;span style=&quot;color: #ffff00;&quot;&gt;uint8&lt;/span&gt; 20 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
[4]&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;  4 [&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Shanghai&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Mumbai&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Istanbul&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Karachi&quot;&lt;/span&gt;]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
未初始化的数组元素都为0。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.2&lt;/span&gt; 切片&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
一般而言，切片比数组更加灵活、强大而且方便。数组是值传递的，切片是引用传递，效率更高。Go语言标准库中的所有公开函数使用的都是切片而非数组。除非特别情况，不然的话都使用切片而非数组。
&lt;/p&gt;

&lt;p&gt;
Go语言的切片是长度可变、容量固定（可以通过将其切片来收缩或使用内置的append()函数来增长）的相同类型元素的序列。
&lt;/p&gt;

&lt;p&gt;
切片的创建：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt;([]&lt;span style=&quot;color: #ffff00;&quot;&gt;Type&lt;/span&gt;, length, capacity)
&lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt;([]&lt;span style=&quot;color: #ffff00;&quot;&gt;Type&lt;/span&gt;, length)
[]&lt;span style=&quot;color: #ffff00;&quot;&gt;Type&lt;/span&gt;{}
[]&lt;span style=&quot;color: #ffff00;&quot;&gt;Type&lt;/span&gt;{value1, value2, value3, ... , valueN}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
内置函数make()用于创建切片、映射和通道。当用于创建切片时，它会创建一个隐藏的初始化为零值的数组，然后返回一个引用该隐藏数组的切片。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; 切片的操作&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;切片s中索引位置为n的项&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n:m]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从切片s的索引位置n到m-1处所获得的切片&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n:]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从切片s的索引位置n到len(s)-1处所获得的切片&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[:m]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从切片s的索引位置0到m-1处所获得的切片&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[:]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从切片s的索引位置0到len(s)-1处所获得的切片&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;cap(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;切片s的容量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;len(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;切片s中所包含项的个数;总是&amp;lt;=cap(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[:cap(s)]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;增加切片s的长度到其容量，如果两者不同的话&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-1&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;1.2.2.1&lt;/span&gt; 索引与分割切片&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-1&quot;&gt;
&lt;p&gt;
一个切片是一个隐藏数组的引用，并且对于该切片的切片也引用同一个数组。通过原始切片或切片的切片，都会改变底层切片。任何切片的第一个索引位置都是0,最后一个都是len(s)-1。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        s := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;E&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;F&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;G&quot;&lt;/span&gt;}
        t := s[2:6]
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(t, s, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;=&quot;&lt;/span&gt;, s[:4], &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;+&quot;&lt;/span&gt;, s[4:])
        s[3] = &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;x&quot;&lt;/span&gt;
        t[&lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(t)-1] = &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;y&quot;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(t, s, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;=&quot;&lt;/span&gt;, s[:4], &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;+&quot;&lt;/span&gt;, s[4:])
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
[C D E F] [A B C D E F G] = [A B C D] + [E F G]
[C x E y] [A B C x E y G] = [A B C x] + [E y G]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-2&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-2&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;1.2.2.2&lt;/span&gt; 遍历切片&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-2&quot;&gt;
&lt;p&gt;
要取得切片中的某个元素而不想修改它，可以使用for&amp;#x2026;range循环，如果想修改它则可以使用for循环。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        amounts := []&lt;span style=&quot;color: #ffff00;&quot;&gt;float64&lt;/span&gt;{237.81, 261.87, 273.93, 279.99, 281.07, 303.17,
                231.47, 227.33, 209.23, 197.09}
        sum := 0.0
        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; _, amount := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; amounts {
                sum += amount
        }
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;&amp;#8721; %.1f&amp;#8594; %.1f\n&quot;&lt;/span&gt;, amounts, sum)
}

&amp;#32467;&amp;#26524;&amp;#65306;
&amp;#8721; [237.8 261.9 273.9 280.0 281.1 303.2 231.5 227.3 209.2 197.1]&amp;#8594; 2503.0
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
如果想修改切片的项，必须使用可以提供有效切片索引而非仅仅是元素副本的for循环。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        amounts := []&lt;span style=&quot;color: #ffff00;&quot;&gt;float64&lt;/span&gt;{237.81, 261.87, 273.93, 279.99, 281.07, 303.17,
                231.47, 227.33, 209.23, 197.09}
        sum := 0.0
        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; i := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; amounts {
                amounts[i] *= 1.05
                sum += amounts[i]
        }

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;&amp;#8721; %.1f&amp;#8594; %.1f\n&quot;&lt;/span&gt;, amounts, sum)
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
&amp;#8721; [249.7 275.0 287.6 294.0 295.1 318.3 243.0 238.7 219.7 206.9]&amp;#8594; 2628.1
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-3&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-3&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;1.2.2.3&lt;/span&gt; 修改切片&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;在切片末尾追加元素或切片
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
在一个切片的末尾追加一个或多个元素甚至是其它切片，可以使用append()函数。这个函数接受一个需要被追加的切片，以及一个或多个需要加入的元素。如果需要在一个切片末尾追加另一个切片，那必须使用&amp;#x2026;操作符来告诉Go语言将被添加进来的切片当成多个元素。追加的元素或切片必须和原切片类型相同 。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        s := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;E&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;F&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;G&quot;&lt;/span&gt;}
        t := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;K&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;L&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;M&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;N&quot;&lt;/span&gt;}
        u := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;m&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;n&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;o&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;p&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;q&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;r&quot;&lt;/span&gt;}

        s = &lt;span style=&quot;color: #b0c4de;&quot;&gt;append&lt;/span&gt;(s, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;h&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;i&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;j&quot;&lt;/span&gt;) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#36861;&amp;#21152;&amp;#21333;&amp;#19968;&amp;#30340;&amp;#20540;&lt;/span&gt;
        s = &lt;span style=&quot;color: #b0c4de;&quot;&gt;append&lt;/span&gt;(s, t...)          &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#36861;&amp;#21152;&amp;#20999;&amp;#29255;&amp;#20013;&amp;#30340;&amp;#25152;&amp;#26377;&amp;#20540;&lt;/span&gt;
        s = &lt;span style=&quot;color: #b0c4de;&quot;&gt;append&lt;/span&gt;(s, u[2:5]...)     &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#28155;&amp;#21152;&amp;#19968;&amp;#20010;&amp;#23376;&amp;#20999;&amp;#29255;&lt;/span&gt;
        b := []&lt;span style=&quot;color: #ffff00;&quot;&gt;byte&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;U&#39;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;V&#39;&lt;/span&gt;}
        letters := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;WXY&quot;&lt;/span&gt;
        b = &lt;span style=&quot;color: #b0c4de;&quot;&gt;append&lt;/span&gt;(b, letters...) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#23558;&amp;#19968;&amp;#20010;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#23383;&amp;#33410;&amp;#28155;&amp;#21152;&amp;#36827;&amp;#19968;&amp;#20010;&amp;#23383;&amp;#33410;&amp;#20999;&amp;#29255;&amp;#20013;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%v\n%s\n&quot;&lt;/span&gt;, s, b)
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
[A B C D E F G h i j K L M N o p q]
UVWXY
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;在切片的任意位置追加元素或切片，并且不改变原切片，使用InsertStringSliceCipy()自定义函数。
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        s := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;M&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;N&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;O&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;P&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Q&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;R&quot;&lt;/span&gt;}
        x := &lt;span style=&quot;color: #00fa9a;&quot;&gt;InsertStringSliceCopy&lt;/span&gt;(s, []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;a&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;b&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;c&quot;&lt;/span&gt;}, 0) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#22312;&amp;#20999;&amp;#29255;&amp;#36215;&amp;#21021;&amp;#22788;&amp;#28155;&amp;#21152;&amp;#20999;&amp;#29255;&lt;/span&gt;
        y := &lt;span style=&quot;color: #00fa9a;&quot;&gt;InsertStringSliceCopy&lt;/span&gt;(s, []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;x&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;y&quot;&lt;/span&gt;}, 3)      &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#22312;&amp;#20999;&amp;#29255;&amp;#20013;&amp;#38388;&amp;#22788;&amp;#28155;&amp;#21152;&amp;#20999;&amp;#29255;&lt;/span&gt;
        z := &lt;span style=&quot;color: #00fa9a;&quot;&gt;InsertStringSliceCopy&lt;/span&gt;(s, []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;z&quot;&lt;/span&gt;}, &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(s))      &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#22312;&amp;#20999;&amp;#29255;&amp;#26411;&amp;#23614;&amp;#28155;&amp;#21152;&amp;#20803;&amp;#32032;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%v\n%v\n%v\n&quot;&lt;/span&gt;, x, y, z)
}

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;InsertStringSliceCopy&lt;/span&gt;(slice, insertion []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;, index &lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;) []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt; {
        result := &lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt;([]&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;, &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(slice)+&lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(insertion))
        at := &lt;span style=&quot;color: #b0c4de;&quot;&gt;copy&lt;/span&gt;(result, slice[:index])
        at += &lt;span style=&quot;color: #b0c4de;&quot;&gt;copy&lt;/span&gt;(result[at:], insertion)
        &lt;span style=&quot;color: #b0c4de;&quot;&gt;copy&lt;/span&gt;(result[at:], slice[index:])
        &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; result
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
[a b c M N O P Q R]
[M N O x y P Q R]
[M N O P Q R z]
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;删除切片元素。利用Go语言的标准切片语法就可以将元素从切片的头尾和中间处删除，这样做会改变原切片。这种删除切片元素的方法其实是对原切片进行再切片。
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        s := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;E&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;F&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;G&quot;&lt;/span&gt;}
        s = s[2:] &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#20174;&amp;#24320;&amp;#22836;&amp;#21024;&amp;#38500;&amp;#20803;&amp;#32032;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(s)

        s = []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;E&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;F&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;G&quot;&lt;/span&gt;}
        s = s[:4] &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#20174;&amp;#26411;&amp;#23614;&amp;#21024;&amp;#38500;&amp;#20803;&amp;#32032;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(s)

        s = []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;E&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;F&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;G&quot;&lt;/span&gt;}
        s = &lt;span style=&quot;color: #b0c4de;&quot;&gt;append&lt;/span&gt;(s[:1], s[5:]...) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#20174;&amp;#20013;&amp;#38388;&amp;#21024;&amp;#38500;&amp;#20803;&amp;#32032;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(s)
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
[C D E F G]
[A B C D]
[A F G]
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;利用自定义函数RemoveStringSliceCopy(),可以在任意位置删除切片元素，又可以保持原切片完整。
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        s := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;A&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;B&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;C&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;D&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;E&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;F&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;G&quot;&lt;/span&gt;}
        x := &lt;span style=&quot;color: #00fa9a;&quot;&gt;RemoveStringSliceCopy&lt;/span&gt;(s, 0, 2)      &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#20174;&amp;#22836;&amp;#37096;&amp;#21024;&amp;#38500;s[:2]&lt;/span&gt;
        y := &lt;span style=&quot;color: #00fa9a;&quot;&gt;RemoveStringSliceCopy&lt;/span&gt;(s, 1, 5)      &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#20174;&amp;#20013;&amp;#38388;&amp;#21024;&amp;#38500;s[1:5]&lt;/span&gt;
        z := &lt;span style=&quot;color: #00fa9a;&quot;&gt;RemoveStringSliceCopy&lt;/span&gt;(s, 4, &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(s)) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#20174;&amp;#26411;&amp;#23614;&amp;#21024;&amp;#38500;s[4:]&lt;/span&gt;

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%v\n%v\n%v\n%v\n&quot;&lt;/span&gt;, s, x, y, z)
}

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;RemoveStringSliceCopy&lt;/span&gt;(slice []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;, start, end &lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;) []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt; {
        result := &lt;span style=&quot;color: #b0c4de;&quot;&gt;make&lt;/span&gt;([]&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;, &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(slice)-(end-start))
        at := &lt;span style=&quot;color: #b0c4de;&quot;&gt;copy&lt;/span&gt;(result, slice[:start])
        &lt;span style=&quot;color: #b0c4de;&quot;&gt;copy&lt;/span&gt;(result[at:], slice[end:])
        &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; result
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
[A B C D E F G]
[C D E F G]
[A F G]
[A B C D]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2-4&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;sec-1-2-2-4&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;1.2.2.4&lt;/span&gt; 排序和搜索切片&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-2-2-4&quot;&gt;
&lt;p&gt;
标准库的sort包提供了对整型、浮点型和字符串型切片进行排序的函数，检查一个切片是否排序好的函数，以及使用二分搜索算法在一个有序切片中搜索一个元素的函数。同时提供了通用的sorg.Sort()和sorg.Search()函数，可用于任何自定义的数据。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 2:&lt;/span&gt; sort包中的函数&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.Float64s(fs)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将[]float64按升序排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.Float64AreSorted(fs)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果[]float64是有序的则返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.Insts(is)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将[]int按升序排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.InstsAreSorted(is)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果[]int是有序的则返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.IsSorted(d)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果sort.InterFace的值d是有序的，则返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.Search(size, fn)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;在一个排序好的数组中根据函数签名为func(int)bool的函数fn进行搜索，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回第一个使得函数fn返回值为true的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.SearchFloat64s(fs, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回有序[]float64切片fs中类型为float64的值f的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.SearchInts(is, i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回有序[]int切片中类型为int的值i的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.SearchStrings(ss, s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回有序[]string切片ss中类型为string的值s的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.Sort(d)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;排序类型为sorg.Interface的切片d&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.Strings(ss)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按升序排序[]string类型的切片ss&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;sort.StringsAreSorted(ss)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果[]string类型的切片ss是有序的，则返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;切片的排序
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Go语言对数值的排序没什么可说的，可对字符串的排序则完全是字节排序，这意味着字符串的排序是区分大小写的。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;sort&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;strings&quot;&lt;/span&gt;
)

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        files := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Test.conf&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;util.go&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;misc.go&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;main.go&quot;&lt;/span&gt;}
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Unsrted:          %q\n&quot;&lt;/span&gt;, files)
        sort.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Strings&lt;/span&gt;(files) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#26631;&amp;#20934;&amp;#24211;&amp;#20013;&amp;#30340;&amp;#25490;&amp;#24207;&amp;#20989;&amp;#25968;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Underlying bytes: %q\n&quot;&lt;/span&gt;, files)
        &lt;span style=&quot;color: #00fa9a;&quot;&gt;SortFoldedStrings&lt;/span&gt;(files) &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#33258;&amp;#23450;&amp;#20041;&amp;#25490;&amp;#24207;&amp;#20989;&amp;#25968;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Case insensitive: %q\n&quot;&lt;/span&gt;, files)
}

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;SortFoldedStrings&lt;/span&gt;(slice []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;) {
        sort.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Sort&lt;/span&gt;(&lt;span style=&quot;color: #00fa9a;&quot;&gt;FoldedStrings&lt;/span&gt;(slice))
}

&lt;span style=&quot;color: #00ffff;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;FoldedStrings&lt;/span&gt; []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; (slice &lt;span style=&quot;color: #ffff00;&quot;&gt;FoldedStrings&lt;/span&gt;) &lt;span style=&quot;color: #00fa9a;&quot;&gt;Len&lt;/span&gt;() &lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt; { &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(slice) }

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; (slice &lt;span style=&quot;color: #ffff00;&quot;&gt;FoldedStrings&lt;/span&gt;) &lt;span style=&quot;color: #00fa9a;&quot;&gt;Less&lt;/span&gt;(i, j &lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;) &lt;span style=&quot;color: #ffff00;&quot;&gt;bool&lt;/span&gt; {
        &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; strings.&lt;span style=&quot;color: #00fa9a;&quot;&gt;ToLower&lt;/span&gt;(slice[i]) &amp;lt; strings.&lt;span style=&quot;color: #00fa9a;&quot;&gt;ToLower&lt;/span&gt;(slice[j])
}

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; (slice &lt;span style=&quot;color: #ffff00;&quot;&gt;FoldedStrings&lt;/span&gt;) &lt;span style=&quot;color: #00fa9a;&quot;&gt;Swap&lt;/span&gt;(i, j &lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;) {
        slice[i], slice[j] = slice[j], slice[i]
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
&lt;span style=&quot;color: #fa8072;&quot;&gt;Unsrted&lt;/span&gt;:          [&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Test.conf&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;util.go&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;misc.go&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;main.go&quot;&lt;/span&gt;]
Underlying bytes: [&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Test.conf&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;main.go&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;misc.go&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;util.go&quot;&lt;/span&gt;]
Case insensitive: [&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;main.go&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;misc.go&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Test.conf&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;util.go&quot;&lt;/span&gt;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
sort.Sort()函数能够对任意类型进行排序，只要其类型提供了sort.Interface接口中定义的方法，即只要这些类型根据相应的签名实现了Len()、Less()和Swap()方法。
&lt;/p&gt;

&lt;p&gt;
SortFoldedStrings()函数简单地使用标准库中的sort.Srot()函数来完成工作，即使用Go语言的标准转换语法将给定的[]string类型的值转换成FoldedStrings类型的值。其实现了3个方法以对应sort.Interface接口。Less()方法通过使用strings.ToLower()函数来达到大小写无关。
&lt;/p&gt;


&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;切片的搜索
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
对于无序数据来说，我们可以使用for&amp;#x2026;range线性搜索。对于小切片（大至上百个元素）来说，效果还不错。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        files := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Test.conf&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;util.go&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;misc.go&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;main.go&quot;&lt;/span&gt;}
        target := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt;

        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; i, file := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; files {
                &lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; file == target {
                        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;found \&quot;%s\&quot; at files[%d]\n&quot;&lt;/span&gt;, file, i)
                        &lt;span style=&quot;color: #00ffff;&quot;&gt;break&lt;/span&gt;
                }
        }
}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
found &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt; at files[2]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
对于大切片特别是如果需要进行重复搜索的话，线性搜索非常低效，平均每次都需要让一半元素相互比较。Go提供了一个使用二分搜索算法的sort.Search()方法，每次只需比较log&lt;sub&gt;2&lt;/sub&gt;n个元素。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;sort&quot;&lt;/span&gt;
)

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        files := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Test.conf&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;util.go&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;misc.go&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;main.go&quot;&lt;/span&gt;}
        target := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt;
        sort.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Strings&lt;/span&gt;(files)
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%q\n&quot;&lt;/span&gt;, files)
        i := sort.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Search&lt;/span&gt;(&lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(files),
                &lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt;(i &lt;span style=&quot;color: #ffff00;&quot;&gt;int&lt;/span&gt;) &lt;span style=&quot;color: #ffff00;&quot;&gt;bool&lt;/span&gt; { &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; files[i] &amp;gt;= target })
        &lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; i &amp;lt; &lt;span style=&quot;color: #b0c4de;&quot;&gt;len&lt;/span&gt;(files) &amp;amp;&amp;amp; files[i] == target {
                fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;found \&quot;%s\&quot; at files[%d]\n&quot;&lt;/span&gt;, files[i], i)
        }

}

&amp;#32467;&amp;#26524;&amp;#20026;&amp;#65306;
[&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Test.conf&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;main.go&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;misc.go&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;util.go&quot;&lt;/span&gt;]
found &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Makefile&quot;&lt;/span&gt; at files[0]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/11/08/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/11/08/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>org-publish被ox-publish替换了</title>
        <description>&lt;p&gt;
系统debian/testing,今天upgrade后，emacs变成了24.4+1-4，结果打开emacs时。
&lt;/p&gt;

&lt;p&gt;
提示“File error: Cannot open load file, 没有那个文件或目录, org-publish”，
&lt;/p&gt;

&lt;p&gt;
解决办法：打开.emacs，把(require &#39;org-publish)修改为(require &#39;ox-publish)，保存，完工。
&lt;/p&gt;
</description>
        <pubDate>Fri, 07 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/org/2014/11/07/org-publish%E8%BF%87%E6%97%B6%E4%BA%86.html</link>
        <guid isPermaLink="true">http://xep007.github.io/org/2014/11/07/org-publish%E8%BF%87%E6%97%B6%E4%BA%86.html</guid>
        
        <category>org</category>
        
        
        <category>org</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（六）——字符串之正则表达式</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 字符串（四）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. regexp包（正则表达式）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 字符串（四）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; regexp包（正则表达式）&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
regexp包的是Russ Cox 的RE2正则表达式引擎的Go语言实现。这个引擎非常快而且是线程安全的。但不使用回溯，执行行时间为O（n）。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; regexp包函数列表 变量p和s都是字符串类型，p表示正则匹配的模式&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;regexp.Match(p, b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果[]byte类型的b和模式p匹配，返回true和nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;regexp.MatchReader(p, r)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果从r中读取的数据和模式p匹配，返回true和nil,r是一个io.RuneReader&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;regexp.MatchString(p, s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果s和模式p匹配，返回true和nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;regexp.QuoteMeta(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;用引号安全地括起来的与正则表达式元字符相匹配的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;regexp.Compile(p)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果模式p编译成功，返回一个*regexp.Regexp和nil，参见表6、7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;regexp.CompilePOSIX(p)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果模式p编译成功，返回一个*regexp.Regexp和nil,参见表6、7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;regexp.MustCompile(p)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果模式p编译成功，返回一个*regexp.Regexp,否则发生异常，通见表6、7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;regexp.MustCompilePOSIX(p)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果模式p编译成功，返回一个*regexp.Regexp,否则发生异常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 2:&lt;/span&gt; regexp包支持的转义符号&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\c&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;原生字符c，例如\*是一个原生字符而不是一个量词&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\000&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表示一个八进制的码点&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\xHH&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表示指定的两个数字是十六进制&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\x{HHHH}&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表示给定1～16个数字是十六进制的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\a&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码的响铃字符，等于\007&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\f&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码的换页符，等于\014&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\n&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码的换行符，等于\012&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\r&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码回车符，等于\015&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码制表符，等于\011&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\v&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码垂直制表符，等于\013&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\Q&amp;#x2026;\E&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;原生匹配&amp;#x2026;中的所有字符即使它包含 *&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 3:&lt;/span&gt; regexp包支持的字符类&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;&amp;#xa0;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;[chars]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;chars中的任何字符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;[^chars]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何不在chars中的字符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;[:name:]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何在name字符类中的ASCII字符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:alnum:] ]三[0-9A-Za-z]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:lower:] ]三[a-z]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:alpha:] ]三[A-Za-z]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:print:] ]三[ -~]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:ascii:] ]三[\x00-\xx7F]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:punct:] ]三[!-/:-@[-&#39;{-~}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:blank:] ]三[ \t]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:space:] ]三[ \t\n\v\f\r]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:cntrl:] ]三[\x00-\x1F\x7F]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:upper:] ]三[A-Z]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:digit:] ]三[0-9]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:word:] ]三[0-9A-Za-z_]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:graph:] ]三[!-～]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[ [:xdigit:] ]三[0-9A-Fa-z]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;[:^name:]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何不在name字符类中的ASCII字符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;.&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何字符（如果指定s标识的话，还包括换行符）&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\d&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何ASCII码数字：[0-9]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\D&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何非数字的ASCII码：[^0-9]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\s&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何ASCII码的空白字符[ \t\n\f\r]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\ S&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何ASCII码的非空白字符[^ \t\n\f\r]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\w&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何ASCII码的单词字符[0-9A-Za-z_]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\W&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何ASCII码的非单词字符[^0-9A-Za-z_]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\pN&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何一个在N指定的的字符类里的Unicode字符，&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;N是一个单字母字符类，例如\pL匹配一个Unicode字母&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\PN&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何一个不在N指定的字符类里的Unicode字符，&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;N是一个单字母符类，例如\PL匹配所有非Unicode字母的字符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\p{Name}&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何在Name指定的字符类里的Unicode字符，例如\p{L}&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将匹配小写字母，\p{Lu}匹配大写字母&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;P{Name}&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任何不在Name字符类里的Unicode字符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 4:&lt;/span&gt; regexp包的零宽断言&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;^&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;文本开始处（m标识指定的话，表示行首）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;$&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;文本末尾处（m标识指定的话，表示行尾）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\A&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;文本开始处&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\z&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;文本结尾处&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\b&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;单词标界（\W和\w之间的字符，或\A和\z之间的字符，反过来也行）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\B&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;不是一个单词标界&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 5:&lt;/span&gt; regexp包的数量匹配&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e? or e {0,1}&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;贪婪匹配：e出现0次或1次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e + or e {1, }&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;贪婪匹配：e出现1次或多次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e* or e{0, }&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;贪婪匹配：e出现0次或多次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e{m, }&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;贪婪匹配：e至少出现m次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e{, n}&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;贪婪匹配：e最多出现n次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e{m, n}&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;贪婪匹配：e最多出现n次，最少出现m次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e{m} or e{m}?&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;e只出现m次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e?? or e{0,1}?&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;惰性匹配：e出现0次或1次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e+? or e{1, }?&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;惰性匹配：e出现1次或多次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e*? or e{0, }?&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;惰性匹配：e出现0次或多次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e{m, }?&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;惰性匹配：e至少出现m次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e{，n}?&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;惰性匹配：e最多出现n次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;e{m, n}?&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;惰性匹配：e最少出现m次，最多出现n次&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 6:&lt;/span&gt; regexp包的标识和分组&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;i&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;匹配大小写不第三的（默认是区分大小写的）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;m&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;开启多行模式，使^ 和$能在每一行进行匹配（默认是单向模式的）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使.能够匹配换行符（默认.是不匹配换行符的）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;U&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将贪婪匹配和惰性匹配进行反转（例如通常题词后面带？表示惰性匹配，指定U之后，这种规则将表示贪婪匹配，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;而原表示贪婪匹配的将表示惰性匹配）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(?flags)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;flags标识从这一点开始生效（flags标记前面加上-符号表示相反）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(?flags:e)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将给定的flags标记作用于表达式e（在flags标记前面加上-号符表示相反）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(e)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表达式e的组和捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(?P&amp;lt;name&amp;gt;e)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表达式e的组和捕获，并显示的使用name来命名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;(?:e)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;表达式e的组但不包括捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
下表是 *regexp.Regexp类型的方法 #1，rx是*regexp.Regexp类型的变量，s是用以匹配的字符串，b是用以匹配的字节切片，r是用以匹配的io.RuneReader类型变量，还有n是最大匹配的次数（-1表示不做限制），返回nil的话表示没有匹配成功。
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 7:&lt;/span&gt; *regexp.Regexp类型的方法 #1&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.Expand(&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;由ReplaceAll()方法执行$替换，很少直接使用(高级用法)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.ExpandString(&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;由ReplaceAllString()方法执行$替换，很少直接使用（高级用法）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.Find(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用最左匹配策略返回一个[]byte类型的切片或者nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindAll(b, n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回所有非重叠匹配的[][]byte类型切片或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindAllIndex(b, n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[][]int类型的切片（每一个元素是一个包含2项的切片），&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;其中每一个元素标识一个匹配或nil。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindAllString(s, n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回[]string类型的非重叠匹配或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindAllStringIndex(s, n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[][]int类型的切片(每一个元素是一个包含2项的切片)，其中每一个元素标识一个匹配或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindAllStringSubmatch(s, n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[][]string类型的切片（一个字符串切片的切片，其中每个字符串对应一个捕获）或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindAllStringSubmatchIndex(s, n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[][]int类型的切片（每一个元素为包含2项的int类型切片，每个元素对应一个匹配）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindAllSubmatch(b, n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个类型为[][][]byte的三维切片（该切片的元素是一个切片，其中每个切片又是一个[]byte&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;类型的切片，其中每一个切片对应一个捕获）或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindAllSubmatchIndex(b, n)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个类型为[][]int的二维切片（一个元素为包含2项的int类型切片，每个元素对应一个匹配）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;或者nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindIndex(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个每个元素含有2项的[]int类型切片，每个元素对应一个最左匹配或nil。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindReaderIndex(r)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个每个元素含有2项的[]int类型的切片，每个元素对应一个最左匹配或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindReaderSubmatchIndex(r)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[]int类型的切片或nil，对应最左匹配和捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindString(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个最左匹配值或空字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindStringIndex(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个每个元素含有2项的[]int类型切片，每个元素对应一个最左匹配或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindStringSubmatch(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[]string类型的切片或nil，对应最左匹配和捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindStringSubmatchIndex(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[]int类型的切片或nil,对应最左匹配和捕获&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
下表为*regexp.Regexp类型的方法#2。rx是*regexp.Regexp类型的变量，s是用以匹配的字符串，b是用以匹配的字节切片。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 8:&lt;/span&gt; *regexp.Regexp类型的方法  #2&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindSubmatch(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回最左的匹配或捕获或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.FindSubmatchIndex(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回最左匹配或者捕获的索引或nil&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.LiteralPrefix()&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回所有匹配共有的原生前缀，和一个布尔变量（表明原生前缀能否匹配整个正则表达式）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.Match(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果正则表达式匹配b,返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.MatchReader(r)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同rx.Match(),但是从io.RuneReader里读取待匹配的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.MatchString(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同rx.Match(),但是匹配字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.NumSubexp()&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回正则表达式中有多少括起来的组（子表达式）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.ReplaceAll(b, br)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[]byte类型的b的副本，其中b中被匹配的部分都使用[]byte类型的br进行$置换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.ReplaceAllFunc(b, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[]byte类型的b副本，其中b中被匹配的部分都使用函数f的返回值来替代，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;f的原型为func([]byte) []byte，其参数为一个匹配项&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.ReplaceAllLiteral(b, br)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个[]byte类型的b的副本，其中b中被匹配的部分都使用[]byte类型的br进行替换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.ReplaceAllLiteralString(s, sr)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个字符串类型的s副本，其中s中被匹配的部分都使用字符中类型的sr进行$替换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.ReplaceAllStringFunc(s, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个字符串类型的s的副本，其中s中被匹配的部分都使用函数f的返回值来替代，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;f的原型为func (string) string,其参数为一个匹配项s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.String()&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回正则表达式的字符串表示形式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;rx.SubexpNames()&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个字符串（不能用于修改目的），包含所有已命名的字符类子表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 02 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/11/02/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/11/02/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（五）——字符串之其他字符处理相关的包</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 字符串（三）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 其他字符处理相关的包&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. string包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. strconv包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. utf8包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;1.1.4. unicode包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 字符串（三）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 其他字符处理相关的包&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
Go语言处理字符串的强大之处不仅限于对索引和切片的支持，也不限于fmt的格式化功能。string包提供了非常强大的功能，此外，strconv、unicode/utf8、unicode等也提供了大量实用的函数。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; string包&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
下表中：变量s和t都是字符串类型，xs是字符串切片，i是int类型，f是一个签名为func (rune)bool的函数引用，索引位置是指位置匹配Unicode码点或者字符串的第一个UTF-8字节的位置，如果没找到匹配的字符串则为-1。 
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; strings包里的列表 #1&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Contains(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果t在s中则返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Count(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;t在s中出现了几多少次&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.EqualFold(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果字符串相等的话则返回true,注意此函数比较时是区分大小写的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Fields(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;在字符串空白处进行切分，返回字符串切片&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.FieldsFunc(s, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按照f函数的返回结果进行切分，如果f返回true,就在那个字符上进行切分&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.HasPrefix(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果字符串s是以t开头的则返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.HasSuffix(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果字符串s是以t结尾的则返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Index(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;t在s中第一次出现的索引位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.IndexAny(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;s中第一个出现在t中的字符的索引位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.IndexFunc(s, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;s中第一次令f函数返回true的字符的索引位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.IndexRune(s, char)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回字符char在s中第一次出现的索引位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Join(xs, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将xs中的所有字符串按照t分隔符进行合并（t可以为&quot;&quot;）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.LastIndex(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;t在s中最后一次出现的位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.LastIndexAny(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;s中最后一个出现在t中的字符的索引位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.LastIndexFunc(s, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;s中最后一个f返回true的字符的索引位置&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Map(mf, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按照mf函数规则(func(rune)rune)替换t中所有对应的字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.NewReader(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;创建一个字符串s的对象，支持Read()、ReadByte()和ReadRune()方法&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.NewReplacer(&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;创建一个替换器能够处理多对旧新字符串的替换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Repeat(s, i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;重复i次字符串s&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;p&gt;
下表中：变量r是unicode类型的，SpecialCase是用来指定Unicode规则的（高级用法）
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 2:&lt;/span&gt; strings包里的函数列表 #2&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Replace(s, old, new, i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新的字符串，对s中旧的非重叠字符串用新的字符串进行替换，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;执行i次操作，如果i = -1则全部替换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Split(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新的字符串切片，在原s上所有出现t的位置进行切分&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.SplitAfter(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同上，但是保留分隔符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.SplitAfterN(s, t, i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同上，但是只进行前i次分割操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.SplitN(s, t, i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同strings.Split()，但是只执行前i次分割操作&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Title(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，对原字符串中每一个单词进行标题首字母大写&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.ToLower(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，对原s进行字母小写转换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.ToLowerSpecial(r, s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，按照指定的优先规则对原s中的相应的Unicode字母进行小写转换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.ToTitle(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，对原s进行标题格式转换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.ToTitleSpecial(r, s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，对原s按照指定的优先规则r进行标题格式转换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.ToUpper(r, s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，对原s中所有的字母进行大写转换处理&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.ToUpperSpecial(r, s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，按照指定的优先规则对原s中的相应的Unicode字母进行大写转换&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.Trim(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，从s两端过滤掉t&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.TrimFunc(s, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，从s两端开始过滤掉f返回true的每一个字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.TrimLeft(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，从s左边开始过滤掉t&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.TrimLeftFunc(s, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，从s左边开始过滤掉f返回true的每一个字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.TrimRight(s, t)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，从s右边开始过滤掉t&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.TrimRightFunc(s, f)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，从s右边开始过滤掉f返回true的每一个字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strings.TrimSpace(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个新字符串，从s左右两端开始过滤掉空格&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
来几个例子：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;字符串分割:strings.Split()
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;strings&quot;&lt;/span&gt;
)

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        names := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;cat&amp;#183;dog&amp;#183;pig&amp;#183;horse&amp;#183;bull&amp;#183;sheep&quot;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Print&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;|&quot;&lt;/span&gt;)
        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; _, name := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; strings.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Split&lt;/span&gt;(names, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;&amp;#183;&quot;&lt;/span&gt;) {
                fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%s|&quot;&lt;/span&gt;, name)
        }

        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;()
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;去掉字符串首尾空白: 
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;strings&quot;&lt;/span&gt;
)

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        names := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;  I am come from china.  &quot;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;|%s|\n&quot;&lt;/span&gt;, &lt;span style=&quot;color: #00fa9a;&quot;&gt;SimpleSimplifyWhitespace&lt;/span&gt;(names))
}

&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;SimpleSimplifyWhitespace&lt;/span&gt;(s &lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;) &lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt; {
        &lt;span style=&quot;color: #00ffff;&quot;&gt;return&lt;/span&gt; strings.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Join&lt;/span&gt;(strings.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Fields&lt;/span&gt;(strings.&lt;span style=&quot;color: #00fa9a;&quot;&gt;TrimSpace&lt;/span&gt;(s)), &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot; &quot;&lt;/span&gt;)
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; strconv包&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
strconv包提供了许多可以在字符串和其他类型的数据之间进行转换的函数。
&lt;/p&gt;


&lt;p&gt;
下表中：参数bs是一个[]byte切片，base是一个进制单位（2～36），bits是指其结果必须满足比位数（对于int型的数据而言，可以是8、16、32、64或者0，对于float64型数据而言，可能是32或64），而s是一个字符串。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 3:&lt;/span&gt; strconv包函数列表#1&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.AppendBool(bs, b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;根据布尔变量b的值，在bs后追加&quot;true&quot;或者&quot;false&quot;字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.AppendFloat(bs, f, fmt, prec, bits)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;在bs后面追加浮点数f,其他参数请参考strconv.Format.Float()函数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.AppendInt(bs, i, base)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;根据base指定的进制在bs后追加int64数字i&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.AppendQuote(bs, s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用strconv.Quote()追加s到bs后面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.AppendQuoteRune(bs, char)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用strconv.QuoteRune(char)追加char到bs后面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.AppendQuoteRuneToASCII(bs, char)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用strconv.QuoteRuneToASCII(char)追加char到bs后面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconf.AppendouotetoASCII(bs, s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用strconv.QuotetoASCII(char)追加s到bs后面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.AppendUInt(bs, u, base)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将uint64类型的变量u按照指定的进制base追加到bs后面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.Atoi(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回转换后的int类型值和一个error（出错时error不为空）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.CanBackquote(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;检查s是否是一个符合Go语言语法的字符串常量，s中不能出现反引号&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.FormatBool(tf)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;格式化布尔变量tf，返回&quot;true&quot;或&quot;false&quot;字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.FormatFloat(f, fmt, prec, bits)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将浮点数f格式化成字符串。fmt是格式化动作，一个字节，如&#39;b&#39;表示%b,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&#39;e&#39;表示%e等等。如果fmt指定为&#39;e&#39;、&#39;E&#39;&#39;、f&#39;时，prec参数表示小数点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;后面至多保留多少位，或者当fmt指定为&#39;g&#39;或&#39;G&#39;时，prec = -1可以获得&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;能用的最少的数字个数，同时使用其他方法保留精度损失。bits通常是64&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.FormatInt(i, base)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将整数i以base指定的进制形式转换成字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.FormatUInt(u, base)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将整数u以base指定的进制形式转换成字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.IsPrint(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;判断c是否为可打印字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.Itoa(i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将十进制数i转换成字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 4:&lt;/span&gt; strconv包函数列表 #2&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.ParseBool(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果s是“1”、&quot;T&quot;、&quot;True&quot;、&quot;TRUE&quot;则返回true和nil，如果s是&quot;0&quot;、&quot;f&quot;、&quot;F&quot;、&quot;false&quot;、&quot;False&quot;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;或者&quot;FALSE&quot;则返回false和nil,否则返回flase和一个error&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.ParseFloat(s, bits)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果s能够转换成浮点数，则返回一个float64类型的值和nil,否则返回0和error;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;bits应该是64，但是如果想转换成float32的话可以设置为32&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconf.ParseInt(s, base, bits)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果s能够转换成一个整数，则返回int64值和nil，否则返回0和error;如果base为0,则表示要从s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;中判断进制的大小（字符串开头是“0x”或&quot;0X&quot;表示这是十六进制的，开头只有&quot;0&quot;表示八进制，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;否则其他的都是十进制），或者在base中指定进制的大小（2～36）;如果需要转换成int型的话&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;bits应该为0,否则需要转换成带有长度的整形（如bits为16的话将会转换成int16）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.ParseUint(s, base, bits)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同上，唯一不同的只是转换成无符号整数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.Quote(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用Go语言双引号字符串语法形式来表示一个字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.QuoteRune(char)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用Go语言单引号字符语法来表示一个rune类型的Unicode码字符char&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.QuoteRuneToASCII(char)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同上，但是对于非ASCII码字符进行转义&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.QuoteToASCII(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同strconv.Quote(),但是对非ASCII码字符进行转义&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.Unquote(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;对于一个用Go语法如单引号、双引号、反引号等表示的字符或字符串，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回引号中的字符串和一个error变量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.UnquoteChar(s, b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个rune(第一个字符)、一个bool（表示第一个字符的UTF-8表示需要多个字节）、一个string&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;(剩下的字符串)以及一个error；如果b被设置为一个单引号或双引号，那么引号须转义&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
所有的strconv转换函数返回一个结果和error变量，如果转换成功的话error为nil。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; utf8包&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
unicode/utf8包里的几个有用的函数，主要用来查询和操作UTF-8编码的字符串或字符切片。
&lt;/p&gt;

&lt;p&gt;
使用utf8包里的函数需要在程序中导入&quot;unicode/utf&quot;,下表中，变量b是一个[]byte类型的切片，s是字符串，c是一个rune类型的Unicode码点。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 5:&lt;/span&gt; utf8包&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.DecodeLastRune(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回b中最后一个rune和它占用的字节数，或者U+FFED(Unicode替换字符？)和0,如果最后一个rune&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;是非法的话&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.DecodeLastRuneInString(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同上，但它输入的是字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.DecodeRune(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回b中的第一个rune和它占用的字节数，或者U+FFED(Unicode替换字符？)和0,如果b开始rune&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;是非法的话&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.DecodeRuneIntString(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同上，但它输入的是字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.EncodeRune(b, c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将c作为一个UTF-8字符并返回写入的字节数（b必须有足够的存储空间）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.FullRune(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果b的第一个rune是UTF-8编码的话，返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.FullRuneInString(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果s的第一个rune是UTF-8编码，返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.RuneCount(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回b中的rune个数，如果存在非ASCII字符的话，这个值可能小于len(s)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.RuneCountInString(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;同上，但它输入的是字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.RuneLen(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;对c进行编码需要的字节数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.RuneStart(x)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果x可以作为一个rune的第一个字节的话，返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.RuneValid(b)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果b中的字节能正确表示一个UTF-8字符串，返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;utf8.ValidString(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果s中的字节能正确表示一个UTF-8编码的字符串，返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.4&lt;/span&gt; unicode包&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p&gt;
unicode包主要提供了一些用来检查Unicode码点是否符合主要标准的函数。
&lt;/p&gt;

&lt;p&gt;
下表中，变量c是一个rune类型变量，表示一个Unicode码点。
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 6:&lt;/span&gt; unicode包&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;语法&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;含义/结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.Is(table, c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c在table中，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsControl(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个控制字符，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsDigit(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个十进制数字，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsGraphic(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个“图形”字符，如字母、数字、标记、符号或空格返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsLetter(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个字母，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsLower(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一小写字母，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsMark(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个标记，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsOneOf(tables, c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c在tables中的任何一个table中，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsPrint(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个可打印的字符，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsPunct(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个标点符号，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsSpace(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个空格，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsSymbol(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个符号，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsTitle(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个标题大写字符，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.IsUpper(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果c是一个大写字母，返回true&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.SimpleFold(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;在与c的码点等价的码点集中，该方法返回最小的大于等于c的码点，否则如果不存在与其等价的码点，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;则返回最小的大于等于0的码点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.To(case, c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字符c的case版本，其中case可以是unicode.LowerCase、unicode.TitleCase或unicode.UpperCasw&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.ToLower(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字母c的小写形式&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.ToTitle(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字符c的标题形式&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;unicode.ToUpper(c)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字母c的大写形式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 30 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/10/30/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/10/30/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（四）——使用fmt格式化包</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第3章 字符串（二）&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 使用fmt包来格式化字符串&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. 格式化布尔值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. 格式化整数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. 格式化字符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-4&quot;&gt;1.1.4. 格式化浮点数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-5&quot;&gt;1.1.5. 格式化字符串和切片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-6&quot;&gt;1.1.6. 为调试格式化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第3章 字符串（二）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 使用fmt包来格式化字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
Go语言标准库中的fmt包提供了打印函数将数据以字符串形式输出到控制台、文件、其他满足io.Writer接口的值以及其他字符串中。有些输出函数的返回值为error,当将数据打印到控制台时，常常将该错误值忽略，但是如果打印到文件和网络连接等地方时，则一定要检查该错误值。
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; fmt包中的打印函数&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;语法&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Errorf(format, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回一个包含所给定的格式化字符串以及args参数的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Fprint(writer, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按照格式%v和空格分隔的非字符串将args写入writer中，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Fprintf(writer, format, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按照字符串格式format将args参数写入writer,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Fprintln(writer, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;按照格式%v以空格分隔以换行符结尾将参数args写入writer,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Print(args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用格式%v以空格分隔的非字符串将args写入os.Stdout,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Printf(format, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用格式化字符串format将args写入os.Stdout,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Println(args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用格式%v以空格分隔以换行符结尾将args写入os.Stdout,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回写入的字节数和一个值为error或nil的错误值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Sprint(args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回args参数组成的字符串，每个参数都使用%v进行格式化的使用空格分离的非字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Sprintf(format, args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回使用格式format格式化的args字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Sprintln(args&amp;#x2026;)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;返回使用格式%v格式化args后的字符串，以空格分隔以换行符结尾&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
输出值的最简单方式是使用fmt.Print()函数和fmt.Println()函数输出到os.Stdout,或者使用fmt.Fprint()函数来输出到给定的io.Writer(如一个文件)，或者使用fmt.Sprint()函数和fmt.Sprintln()函数来输出到一个字符串。
&lt;/p&gt;

&lt;p&gt;
用于fmt.Errorf()、fmt.Printff()、fmt.Fprintf()以及fmt.Sprintf()函数的格式字符串包含一个或多个格式指令，这些格式指令的形式是%ML，其中M表示一个或多个可选的格式指令修饰符，而L则表示一个特定的格式指令符，这些格式指令见下表。有些格式指令可以接收一个或者多个修饰符，这些修饰符见再下一个表。
&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 2:&lt;/span&gt; fmt包中的格式指令&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;格式指令&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;left&quot;&gt;含义/结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%%&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个%字面量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%b&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个二进制整数值（基数为２），或者是一个（高级的）用科学计数法表示的指数为２的浮点数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%c&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个Unicode字符的码点值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%d&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个十进制数值（基数为0）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%e&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以科学计数法e表示的浮点数或者复数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%E&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以科学计数法E表示的浮点数或者复数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%f&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以标准记数法表示的浮点数或者复数值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%g&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以%e或者%f表示的浮点数或者复数，任何一个都以最为紧凑的方式输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%G&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以%E或者%f表示的浮点数或者复数，任何一个都以最为紧凑的方式输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%o&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个以八进制表示的数字（基数为8）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%p&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以十六进制（基数为16）表示的一个值的地址，前缀为Ox，字母使用小写民的a~f表示（用于高度）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%q&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用Go语法以及必要时使用转义，以双引号括起来的字符串或字节切片[]byte,或是以单引号括起来的数字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%s&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以原生的UTF-8字节表示的字符串或[]byte切片，对于一个给定的文本文件或在一个能够显示UTF-8编码的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;控制台，它会产生正确的Unicode输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以true或false输出的布尔值&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%T&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用Go语法输出的值的类型&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%U&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;一个用Unicode表示法表示的整数码点，默认值为4个数字字符。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%v&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;使用默认格式输出的内置或自定义类型的值，或者是使用其类型的String()方法输出的自定义值，如果该方法存在的话&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%x&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以十六进制表示的整型值（基数为十六），或者是以十六进制数字表示的字符串或&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[]byte数组（每个字节用两个数字表示），数字a~f使用小写表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;%X&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;以十六进制表示的整型值（基数为十六），或者是以十六进制数字表示的字符串或&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;[]byte数组（每个字节用两个数字表示），数字A~F使用大写表示&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;



&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 3:&lt;/span&gt; fmt 包中的格式指令修饰符&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;修饰符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;含义/结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;空白&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;如果输出的数字为负数，则在其前面加上一个减号&quot;-&quot;。如果输出的是正数，则在其前面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;加上一个空格。使用%x或者%X格式指令输出时，会在结果之间添加一个空格，例如，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Printf(&quot;% X&quot;, &quot;←&quot;)输出E2 86 92&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;#&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;让格式指令以另外一种格式输出数据：&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#o输出以0打头的八进制数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#p输出一个不含0x打头的指针&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#q尽可能以原始字符串的形式输出一个字符串或者[]byte切片（使用反引号），否则输出以双引号引起来的字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#v使用Go语法将值自身输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#x输出以0x打头的十六进制数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;%#X输出以0X打头的十六进制数据&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;+&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;让格式指令在数值前面输出+号或者-号，为字符串输出ASCII字符（别的字符会被转义），为结构体输出其字段名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;-&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;让格式指令将值进行向左对齐（默认值为右对齐）&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;0&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;让格式指令以数字0而非空白进行填充&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;n.m&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;对于数字，这个修饰符会使用n（int值）个字符输出浮点数或者复数（为避免截断可以输出更多个），并在小数点后面&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;n&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;输出m（int值）个数字。对于字符串，n声明了其最小宽度，并且如果字符串太小则会以空格填充，而m则声明了输出&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;m&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;的字符串所能使用的最长字符个数（从左至右），如果太长则可能会导致字符被截断。m和n两个都可以使用&#39;*&#39;来代替，&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;这种情况下它们的值就可以从参数中获取。n或m都可以被省略&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;



&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; 格式化布尔值&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
布尔值使用%t（真值，truth value）格式指令来输出。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%t %t\n&quot;&lt;/span&gt;, &lt;span style=&quot;color: #fa8072;&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color: #fa8072;&quot;&gt;false&lt;/span&gt;)
&amp;#36755;&amp;#20986;&amp;#65306;true &lt;span style=&quot;color: #fa8072;&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; 格式化整数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
二进制格式指令为%b,八进制为%o,十六进制为%x，八进制和十六进制都可使用#修饰符。十进制整数使用%d，字符串使用%s。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; 格式化字符&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
Go语言的字符都是rune(即int32值)，它们可以以数字或者Unicode字符的形式输出。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%d %#o4x %U &#39;%c&#39;\n&quot;&lt;/span&gt;, 0x3A6, 934, &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;\u03A6&#39;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;\U000003A6&#39;&lt;/span&gt;)
&amp;#36755;&amp;#20986;&amp;#65306;934 016464x U+03A6 &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#934;&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.4&lt;/span&gt; 格式化浮点数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-4&quot;&gt;
&lt;p&gt;
浮点数格式可以指定整体长度、小数位数，以及使用标准计数法还是科学计数法。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.5&lt;/span&gt; 格式化字符串和切片&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-5&quot;&gt;
&lt;p&gt;
字符串输出时可以指定一个最小宽度（如果字符串太短，打印函数会以空格填充）或者一个最大输出字符数（会将太长的字符串截断）。字符串可以以Unicode编码（即字符）、一个码点序列（即rune）或者表示它们的UTF-8字节码的形式输出。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-1-6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-6&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.6&lt;/span&gt; 为调试格式化&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-6&quot;&gt;
&lt;p&gt;
%T（类型）格式指令用于打印一个内置的或者自定义值的类型，而%v格式指令则用于打印一个内置值的类型。事实上%v也可以打印自定义类型的值。
&lt;/p&gt;

&lt;p&gt;
为了更好地调试，使用%#v格式指令可以以编程的形式输出Go语言代码。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 28 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/10/28/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/10/28/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>GNU Emacs Lisp编程入门笔记（九）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 循环和递归&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. while&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-1&quot;&gt;1.1.1. 一个例子：print-elements-of-list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-2&quot;&gt;1.1.2. 使用增量计数器的循环&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1-3&quot;&gt;1.1.3. 使用减量计数器的循环&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. 递归&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-1&quot;&gt;1.2.1. 使用列表的递归函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-2&quot;&gt;1.2.2. 用递归算法代替计数器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2-3&quot;&gt;1.2.3. 使用cond的递归例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 循环和递归&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Emacs Lisp有两种方式使一个表达式或一组表达式不断被求值：一是使用while循环，一是使用递归。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; while&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
while特殊表对其第一个参量进行求值，并测试这个返回值的真假。如为假，则跳出这个表达式的其余部分。如为真则对表达式的主体进行求值，然后再次测试第一个参量的真假，重复进行。
&lt;/p&gt;

&lt;p&gt;
while表达式的模板如下：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;while&lt;/span&gt; true-of-false-test
    body&amp;#8230;&amp;#8230;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.1&lt;/span&gt; 一个例子：print-elements-of-list&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(setq animals &#39;(giraffe gazelle lion tiger))
(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;print-elements-of-list&lt;/span&gt; (list)
  &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;Print each element of LIST on a line of its own.&quot;&lt;/span&gt;
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;while&lt;/span&gt; list
          (print (car list))
          (setq list (cdr list))))
(print-elements-of-list animals)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.2&lt;/span&gt; 使用增量计数器的循环&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
来一个例子吧。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;sum&lt;/span&gt; (number)
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;let&lt;/span&gt; ((total 0)
        (i 1))
    (&lt;span style=&quot;color: #00ffff;&quot;&gt;while&lt;/span&gt; (&amp;lt;= i number)
    (setq total (+ i total))
    (setq i (1+ i)))
    total))
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(sum 100)          //&amp;#24471;&amp;#25968;&amp;#20026;5050
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.1.3&lt;/span&gt; 使用减量计数器的循环&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-3&quot;&gt;
&lt;p&gt;
来一个例子吧。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;sum&lt;/span&gt; (number)
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;let&lt;/span&gt; ((total 0))
    (&lt;span style=&quot;color: #00ffff;&quot;&gt;while&lt;/span&gt; (&amp;gt; number 0)
    (setq total (+ number total))
    (setq number (- number 1)))
    total))
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(sum 100)       //&amp;#24471;&amp;#25968;5050
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 递归&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
递归函数就是调用自身的函数。
&lt;/p&gt;

&lt;p&gt;
一个递归函数通常一个条件表达式，这个表达式有三个部分：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;一个真假测试
&lt;/li&gt;
&lt;li&gt;函数名
&lt;/li&gt;
&lt;li&gt;一个表达式
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
递归的模板如下所示：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;name-of-recursive-function&lt;/span&gt; (argument-list)
    &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;documentation&amp;#8230;&amp;#8230;&quot;&lt;/span&gt;
    body&amp;#8230;&amp;#8230;
    (&lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; do-again-test
        (name-of-recursive-function
            next-step-expression)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.1&lt;/span&gt; 使用列表的递归函数&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(setq animals &#39;(giraffe gazelle lion tiger))
(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;print-elements-recursively&lt;/span&gt; (list)
  (print (car list))
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; list
      (print-elements-recursively
       (cdr list))))
(print-elements-recursively animals)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
(print-elements-recursively animals)会递归调用打印列表animals。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.2&lt;/span&gt; 用递归算法代替计数器&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;sum&lt;/span&gt; (number)
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; (= number 1)
      1
    (+ number
       (sum
        (1- number)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(sum 100)             //&amp;#24471;&amp;#25968;5050
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.2.3&lt;/span&gt; 使用cond的递归例子&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;p&gt;
上文sum函数中用if来判断，其实也可用cond(conditinal条件)特殊表来编写。
&lt;/p&gt;

&lt;p&gt;
cond表达式的模板如下所示：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;cond&lt;/span&gt;
    body&amp;#8230;&amp;#8230;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
重写sum函数：
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(&lt;span style=&quot;color: #00ffff;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;sum&lt;/span&gt; (number)
  (&lt;span style=&quot;color: #00ffff;&quot;&gt;cond&lt;/span&gt; ((&amp;lt;= number 0) 0)
        ((= number 1) 1)
        ((&amp;gt; number 1)
         (+ number (sum (1- number))))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/emacs/lisp/2014/10/26/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/emacs/lisp/2014/10/26/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89.html</guid>
        
        <category>lisp</category>
        
        
        <category>emacs</category>
        
        <category>lisp</category>
        
      </item>
    
      <item>
        <title>Go语言程序设计读书笔记（三）——字符串基本知识</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第3章 字符串(一)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. 字面量、操作符和转义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. 比较字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-3&quot;&gt;1.3. 字符和字符串&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-4&quot;&gt;1.4. 字符串索引与切片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第3章 字符串(一)&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 字面量、操作符和转义&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
字符串字面量使用双引号(&quot;)或者反引号(`)来创建。双引号用来创建可解析的字符串，但不能用来引用多行。反引号用来创建原生的字符串字面量，可多行，不支持转义序列。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;text1 := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;\&quot;what&#39;s that?\&quot;, he said&quot;&lt;/span&gt;    &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#21487;&amp;#35299;&amp;#26512;&amp;#30340;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#23383;&amp;#38754;&amp;#37327;&lt;/span&gt;
text2 := &lt;span style=&quot;color: #ffa500;&quot;&gt;`&quot;what&#39;s that?&quot;, he said`&lt;/span&gt;      &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;&amp;#21407;&amp;#29983;&amp;#30340;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#23383;&amp;#38754;&amp;#37327;&lt;/span&gt;
radicais := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;&amp;#8730;\u221A \U0000221A&quot;&lt;/span&gt;        &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;radicais == &quot;&amp;#8730; &amp;#8730; &amp;#8730;&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; Go语言的字符串和字符转义&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;转义字符&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;含义&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\\&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;反斜线&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\ooo&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;3个8位数给定的八进制代码的Unicode字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\&#39;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;单引号，只用于字符字面量内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\&quot;&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;双引号，只用于可解析的字符串字面量内&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\a&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码响铃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\b&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码退格&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\f&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码换页&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\n&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码换行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\r&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码回车&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码制表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\uhhhh&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;4个16位数字给定的十六进制码点的Unicode字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\Uhhhhhhhh&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;8个32位数字给定的十六进制码点的Unicode字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\v&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;ASCII码的垂直制表符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;\xhh&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;2个8位数字给定的十六进制码点的Unicode字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 2:&lt;/span&gt; 字符串操作符&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;left&quot; /&gt;

&lt;col  class=&quot;left&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;语法&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;描述/结果&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s += t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将字符串t追加到字符串s的末尾&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s + t&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将字符串s和t级联&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字符串s中索引位置为n处的原始字节&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n:m]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从位置n到位置m-1处取得的字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[n:]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从位置n到位置len(s)-1处取得的字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;s[:m]&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;从索引位置0到位置m-1处取得的字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;len(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字符串s中的字节数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;len([]rune(s))&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;字符串s中字符的个数——可以使用更快的utf8.RuneCountInString()来代替&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;[]rune(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将字符串s转换成一个Unicode码点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;string(chars)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将一个[]rune或者[]int32转换成字符串，这里假设rune和int32切片都是Unicode码点&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;[]byte(s)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无副本地将字符串s转换成一个原始字节的切片数组，不保证转换的字节是合法的&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;string(bytes)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;无副本地将[]byte或者[]uint8转换成一个字符串类型，不保证转换的字节是合法的UTF8编码字节&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;string(i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;将任意数字类型的i转换成字符串，假设i是一个Unicode码点。例如i的值是65,那返回值为A&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;strconv.Itoa(i)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;int类型i的字符串表示和一个错误值。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;left&quot;&gt;fmt.Sprint(x)&lt;/td&gt;
&lt;td class=&quot;left&quot;&gt;任意类型x的字符串表示，例如，如果x是值为65的数字类型，那么返回值为65&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 比较字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
Go语言字符串支持常规的比较操作(&amp;lt;、&amp;lt;= 、==、!= 、&amp;gt; 、&amp;gt;=),这些比较操作符在内存中一个字节一个字节地比较字符串。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 字符和字符串&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
在Go语言中，字符使用两种不同的方式（可以很容易相互转换）来表示。一个单一的字符可以用一个单一的rune（或int32）来表示。
&lt;/p&gt;

&lt;p&gt;
字符串表示一个包含0个或多个字符序列的串。在一个字符串内部，每个字符都表示成一个或多个UTF-8编码的字节。
&lt;/p&gt;

&lt;p&gt;
字符串和rune切片互相转换：
&lt;/p&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;chars := []rune(s)   //字符串转换成一个rune（即码点）切片。
&lt;/li&gt;
&lt;li&gt;s := string(chars)   //字符转换成字符串。
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
在一个字符串末尾追加字符串有三种方法：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;使用&quot;+=&quot;（不包括引号）操作符。s += s1
&lt;/li&gt;
&lt;li&gt;准备一个字符串切片([]string),然后使用strings.Join()函数一次性把所有的字符串串联起来。
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main
&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
        &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;strings&quot;&lt;/span&gt;
)
&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        s := []&lt;span style=&quot;color: #ffff00;&quot;&gt;string&lt;/span&gt;{&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;abc&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;def&quot;&lt;/span&gt;, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;ghi&quot;&lt;/span&gt;}
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Println&lt;/span&gt;(strings.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Join&lt;/span&gt;(s, &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;&quot;&lt;/span&gt;))
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
输出：abcdefghi
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;利用bytes.Buffer.WriteString()方法
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;var&lt;/span&gt; buffer bytes.Buffer
&lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; {
        &lt;span style=&quot;color: #00ffff;&quot;&gt;if&lt;/span&gt; piece, ok := &lt;span style=&quot;color: #00fa9a;&quot;&gt;getNextValidString&lt;/span&gt;(); ok { &lt;span style=&quot;color: #ffd700;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #ffd700;&quot;&gt;getNextValidString()&amp;#24471;&amp;#33258;&amp;#24049;&amp;#23454;&amp;#29616;&lt;/span&gt;
                buffer.&lt;span style=&quot;color: #00fa9a;&quot;&gt;WriteString&lt;/span&gt;(piece)
        } &lt;span style=&quot;color: #00ffff;&quot;&gt;else&lt;/span&gt; {
                &lt;span style=&quot;color: #00ffff;&quot;&gt;break&lt;/span&gt;
        }
}
fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Print&lt;/span&gt;(buffer.&lt;span style=&quot;color: #00fa9a;&quot;&gt;String&lt;/span&gt;(), &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;\n&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
创建一个空的bytes.Buffer类型的值，然后使用bytes.Buffer.WriteString()方法将需要串联的字符串写入到buffer中，最后，bytes.Buffer.String()方法可以取回字符串。这个办法比前两个办法更高效。
&lt;/p&gt;

&lt;p&gt;
Go语言的for……range循环可以用于一个字符一个字符的迭代字符串。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff;&quot;&gt;package&lt;/span&gt; main
&lt;span style=&quot;color: #00ffff;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
&lt;span style=&quot;color: #00ffff;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #00fa9a;&quot;&gt;main&lt;/span&gt;() {
        phrase := &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;I am a boy. &amp;#25105;&amp;#26159;&amp;#20013;&amp;#22269;&amp;#20154;&amp;#12290;&quot;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;string: \&quot;%s\&quot;\n&quot;&lt;/span&gt;, phrase)
        &lt;span style=&quot;color: #00ffff;&quot;&gt;for&lt;/span&gt; index, char := &lt;span style=&quot;color: #00ffff;&quot;&gt;range&lt;/span&gt; phrase {
                fmt.&lt;span style=&quot;color: #00fa9a;&quot;&gt;Printf&lt;/span&gt;(&lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;%-2d    %U    &#39;%c&#39;    %X\n&quot;&lt;/span&gt;, index, char, char, []&lt;span style=&quot;color: #00fa9a;&quot;&gt;byte&lt;/span&gt;(&lt;span style=&quot;color: #00fa9a;&quot;&gt;string&lt;/span&gt;(char)))
        }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
运行结果为：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #fa8072;&quot;&gt;string&lt;/span&gt;: &lt;span style=&quot;color: #ffa500;&quot;&gt;&quot;I am a boy. &amp;#25105;&amp;#26159;&amp;#20013;&amp;#22269;&amp;#20154;&amp;#12290;&quot;&lt;/span&gt;
0     U+0049    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;I&#39;&lt;/span&gt;    49
1     U+0020    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39; &#39;&lt;/span&gt;    20
2     U+0061    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;a&#39;&lt;/span&gt;    61
3     U+006D    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;m&#39;&lt;/span&gt;    6D
4     U+0020    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39; &#39;&lt;/span&gt;    20
5     U+0061    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;a&#39;&lt;/span&gt;    61
6     U+0020    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39; &#39;&lt;/span&gt;    20
7     U+0062    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;b&#39;&lt;/span&gt;    62
8     U+006F    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;o&#39;&lt;/span&gt;    6F
9     U+0079    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;y&#39;&lt;/span&gt;    79
10    U+002E    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;.&#39;&lt;/span&gt;    2E
11    U+0020    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39; &#39;&lt;/span&gt;    20
12    U+6211    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#25105;&#39;&lt;/span&gt;    E68891
15    U+662F    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#26159;&#39;&lt;/span&gt;    E698AF
18    U+4E2D    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#20013;&#39;&lt;/span&gt;    E4B8AD
21    U+56FD    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#22269;&#39;&lt;/span&gt;    E59BBD
24    U+4EBA    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#20154;&#39;&lt;/span&gt;    E4BABA
27    U+3002    &lt;span style=&quot;color: #ffa500;&quot;&gt;&#39;&amp;#12290;&#39;&lt;/span&gt;    E38082
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; 字符串索引与切片&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
索引字符串的单个字符，有多种方法：
&lt;/p&gt;

&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;对于只包含7位ASCII字符的字符串，只需要简单使用[]索引操作符。
&lt;/li&gt;
&lt;li&gt;对于包含非ASCII字符组成的字符串，我们可以将其转换成[]rune再使用[]索引操作符。以上二者的性能都为O(1)。
&lt;/li&gt;
&lt;li&gt;对于任意字符串（即那些可能包含有非ASCII字符的字符串），更好的方法是使用字符串切片。请参照3.6.1(下一个笔记)中的string包。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 26 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/golang/2014/10/26/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/golang/2014/10/26/Go%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89.html</guid>
        
        <category>golang</category>
        
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>在org-mdoe表格中输入“|”符号</title>
        <description>&lt;p&gt;
今天在org-mode中制作表格，需要在单元格中输入“|”符号，可“|”符号是制表符，一直试都未能成功。没办法只好去找org-mode文档。终于在&lt;a href=&quot;http://orgmode.org/manual/Built_002din-table-editor.html#fnd-1&quot;&gt;org-mode文档&lt;/a&gt;最后一行找到了答案，记下来，备忘。
&lt;/p&gt;


&lt;p&gt;
在需要输入“|”的地方输入\vert就行了。
&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/org/2014/10/25/%E5%9C%A8org-mode%E8%A1%A8%E6%A0%BC%E4%B8%AD%E8%BE%93%E5%85%A5%7C%E7%AC%A6%E5%8F%B7.html</link>
        <guid isPermaLink="true">http://xep007.github.io/org/2014/10/25/%E5%9C%A8org-mode%E8%A1%A8%E6%A0%BC%E4%B8%AD%E8%BE%93%E5%85%A5%7C%E7%AC%A6%E5%8F%B7.html</guid>
        
        <category>org</category>
        
        
        <category>org</category>
        
      </item>
    
      <item>
        <title>GNU Emacs Lisp编程入门笔记（八）</title>
        <description>&lt;div id=&quot;table-of-contents&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1&quot;&gt;1. 第10章 找回文本&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-1&quot;&gt;1.1. kill环总览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sec-1-2&quot;&gt;1.2. kill-ring-yank-pointer变量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 第10章 找回文本&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在GNU Emacs中，无论你何时用&quot;kill&quot;命令从缓冲区中剪切了文本，都能用一个&quot;yank&quot;命令将其找回。
&lt;/p&gt;

&lt;p&gt;
一个简单的C-y(yank)命令，就从kill-ring(kill环)中取出第一个元素插入到当前缓冲区中。如果C-y后紧跟一个M-y命令，则不是第一个元素而是第二个元素被插入到当前缓冲区中。连续使用M-y则会把第三个、第四个……等代替第二个元素插入到当前缓冲区。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; kill环总览&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
kill环是文本字符串的一个列表。它类似于下面的列表：
(&quot;some text&quot; &quot;a different piece of text&quot; &quot;yet more text&quot;)
&lt;/p&gt;

&lt;p&gt;
能将文本从kill环中找回的函数有三个：yank函数，通常绑定到C-y; yank-pop函数，通常绑定到M-y;rotate-yank-pointer函数，这个函数被前面两个函数使用。
&lt;/p&gt;

&lt;p&gt;
这些函数通过一个被称为kill-ring-ynak-pointer的变量指向kill环。事实上，yank函数和yank-pop函数中插入文本的代码都是下面这个表达式。
&lt;/p&gt;

&lt;p&gt;
(insert (car kill-ring-yank-pointer))
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; kill-ring-yank-pointer变量&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
跟kill-ring一样，kill-ring-yank-pointer也是一个变量。它通过被绑定到相应的值来指向某些东西，这一点与其他Lisp变量没有什么两样。
&lt;/p&gt;

&lt;p&gt;
因而，如果kill环的值是：
&lt;/p&gt;

&lt;p&gt;
(&quot;some text&quot; &quot;a different piece of text&quot; &quot;yet more text&quot;)
&lt;/p&gt;

&lt;p&gt;
并且kill-ring-yank-pointer变量指向其中的第二个元素，则kill-ring-yank-pointer变量的值就是：
&lt;/p&gt;

&lt;p&gt;
(&quot;a different piece of text&quot; &quot;yet more text&quot;)
&lt;/p&gt;

&lt;p&gt;
变量kill-ring和kill-ring-yank-pointer都是指针，第一个指向被剪切文本列表的第一个元素，第二个指向第二个元素。
&lt;/p&gt;

&lt;p&gt;
rotate-yank-pointer函数改变kill-ring-yank-pointer变量指向的kill环中的元素。当这个元素指向的下一个元素超出了kill环的末尾，它自动将这个指针指向kill环的第一个元素。这就将一个列表自动转化为一个环的方法。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 25 Oct 2014 00:00:00 +0800</pubDate>
        <link>http://xep007.github.io/emacs/lisp/2014/10/25/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89.html</link>
        <guid isPermaLink="true">http://xep007.github.io/emacs/lisp/2014/10/25/gnu%20emacs%20lisp%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89.html</guid>
        
        <category>lisp</category>
        
        
        <category>emacs</category>
        
        <category>lisp</category>
        
      </item>
    
  </channel>
</rss>
